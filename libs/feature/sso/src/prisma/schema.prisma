generator client {
  provider = "prisma-client"
  
  output   = "../../../../../libs/feature/sso/src/lib/generated/prisma-client"
  
  previewFeatures = ["queryCompiler","driverAdapters"]
  
  moduleFormat = "cjs"
  
  
}
datasource db {
  provider          = "postgres"
  url               = env("SITE_15_SSO_DATABASE_URL")
}
generator prismaClassGenerator {
  provider                        = "npm run generator"
  output                          = "../lib/generated/rest/dto"
  annotateAllDtoProperties        = "true"
  classValidation                 = "true"
  createDtoPrefix                 = "Create"
  definiteAssignmentAssertion     = "true"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  exportRelationModifierClasses   = "true"
  fileNamingStyle                 = "kebab"
  flatResourceStructure           = "false"
  noDependencies                  = "false"
  outputToNestJsResourceStructure = "false"
  prettier                        = "true"
  reExport                        = "false"
  updateDtoPrefix                 = "Update"
}

model SsoUser {
  /// @DtoCreateHidden
  id                String              @id(map: "PK_SSO_USERS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email             String              @db.VarChar(255)
  phone             String?             @db.VarChar(255)
  username          String?             @db.VarChar(255)
  /// @DtoEntityHidden
  password          String              @db.VarChar(255)
  roles             String?             @db.VarChar(255)
  firstname         String?             @db.VarChar(255)
  lastname          String?             @db.VarChar(255)
  gender            String?             @db.VarChar(1)
  birthdate         DateTime?           @db.Timestamp(6)
  picture           String?
  appData           Json?
  revokedAt         DateTime?           @db.Timestamp(6)
  emailVerifiedAt   DateTime?           @db.Timestamp(6)
  phoneVerifiedAt   DateTime?           @db.Timestamp(6)
  timezone          Float?
  lang              String?             @db.VarChar(2)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  tenantId          String              @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  SsoOAuthToken     SsoOAuthToken[]
  SsoRefreshSession SsoRefreshSession[]
  SsoTenant         SsoTenant           @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_USERS__TENANT_ID")

  @@unique([tenantId, email], map: "UQ_SSO_USERS__EMAIL")
  @@unique([tenantId, username], map: "UQ_SSO_USERS__USERNAME")
  @@index([tenantId], map: "IDX_SSO_USERS__TENANT_ID")
}

model migrations_sso {
  installed_rank Int      @id(map: "__migrations_sso_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_sso_s_idx")
  @@map("__migrations_sso")
}

model SsoRefreshSession {
  /// @DtoCreateHidden
  id           String    @id(map: "PK_SSO_REFRESH_SESSIONS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  /// @DtoEntityHidden
  refreshToken String    @db.Uuid
  userAgent    String?   @db.VarChar(255)
  /// @DtoEntityHidden
  fingerprint  String?   @db.VarChar(255)
  userIp       String?   @db.VarChar(128)
  expiresAt    DateTime? @db.Timestamp(6)
  userData     Json?
  enabled      Boolean
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  userId       String    @db.Uuid
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  tenantId     String    @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  SsoTenant    SsoTenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_REFRESH_SESSIONS__TENANT_ID")
  SsoUser      SsoUser   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_REFRESH_SESSIONS__USER_ID")

  @@index([tenantId], map: "IDX_SSO_REFRESH_SESSIONS__TENANT_ID")
  @@index([tenantId, userId], map: "IDX_SSO_REFRESH_SESSIONS__USER_ID")
}

model SsoEmailTemplate {
  /// @DtoCreateHidden
  id            String    @id(map: "PK_SSO_EMAIL_TEMPLATES") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subject       String
  subjectLocale Json?
  text          String
  textLocale    Json?
  html          String
  htmlLocale    Json?
  operationName String?   @db.VarChar(128)
  /// @DtoCreateOptional
  /// @DtoUpdateOptional
  tenantId      String    @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  SsoTenant     SsoTenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_EMAIL_TEMPLATES__TENANT_ID")

  @@unique([tenantId, operationName], map: "UQ_SSO_EMAIL_TEMPLATES__OPERATION_NAME")
  @@index([tenantId], map: "IDX_SSO_EMAIL_TEMPLATES__TENANT_ID")
}

model SsoOAuthProvider {
  /// @DtoCreateHidden
  id                       String                     @id(map: "PK_SSO_OAUTH_PROVIDER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                     String                     @unique(map: "UQ_SSO_OAUTH_PROVIDER__NAME") @db.VarChar(255)
  enabled                  Boolean
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt                DateTime                   @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt                DateTime                   @default(now()) @db.Timestamp(6)
  SsoOAuthProviderSettings SsoOAuthProviderSettings[]
  SsoOAuthToken            SsoOAuthToken[]
}

model SsoOAuthProviderSettings {
  /// @DtoCreateHidden
  id               String           @id(map: "PK_SSO_OAUTH_PROVIDER_SETTINGS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String           @db.VarChar(255)
  value            String
  /// @DtoUpdateHidden
  providerId       String           @db.Uuid
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime         @default(now()) @db.Timestamp(6)
  SsoOAuthProvider SsoOAuthProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_OAUTH_PROVIDER_SETTINGS__PROVIDER_ID")

  @@unique([providerId, name], map: "UQ_SSO_OAUTH_PROVIDER_SETTINGS__NAME")
  @@index([providerId], map: "IDX_SSO_OAUTH_PROVIDER_SETTINGS__PROVIDER_ID")
}

model SsoOAuthToken {
  /// @DtoCreateHidden
  id               String           @id(map: "PK_SSO_OAUTH_TOKENS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  grantedAt        DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoEntityHidden
  accessToken      String           @db.VarChar(512)
  /// @DtoEntityHidden
  refreshToken     String?          @db.VarChar(512)
  expiresAt        DateTime?        @db.Timestamp(6)
  tokenType        String?          @db.VarChar(255)
  scope            String?          @db.VarChar(512)
  verificationCode String?          @db.VarChar(512)
  userId           String           @db.Uuid
  tenantId         String           @db.Uuid
  /// @DtoUpdateHidden
  providerId       String           @db.Uuid
  providerUserId   String           @db.VarChar(512)
  providerUserData Json?
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt        DateTime         @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt        DateTime         @default(now()) @db.Timestamp(6)
  SsoOAuthProvider SsoOAuthProvider @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_OAUTH_TOKENS__PROVIDER_ID")
  SsoTenant        SsoTenant        @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_OAUTH_TOKENS__TENANT_ID")
  SsoUser          SsoUser          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_SSO_OAUTH_TOKENS__USER_ID")

  @@unique([tenantId, providerId, userId, accessToken], map: "UQ_SSO_OAUTH_TOKENS__NAME")
  @@index([providerId], map: "IDX_SSO_OAUTH_TOKENS__PROVIDER_ID")
  @@index([userId], map: "IDX_SSO_OAUTH_TOKENS__USER_ID")
  @@index([tenantId], map: "IDX_SSO_OAUTH_TOKENS__TENANT_ID")
}

model SsoTenant {
  /// @DtoCreateHidden
  id                String              @id(map: "PK_SSO_TENANTS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  slug              String              @unique(map: "UQ_SSO_TENANTS__SLUG") @db.VarChar(255)
  name              String              @db.VarChar(255)
  nameLocale        Json?
  clientId          String              @unique(map: "UQ_SSO_TENANTS__CLIENT_ID") @db.VarChar(100)
  clientSecret      String              @db.VarChar(255)
  enabled           Boolean
  public            Boolean
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  /// @DtoCreateHidden
  /// @DtoUpdateHidden
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  SsoEmailTemplate  SsoEmailTemplate[]
  SsoOAuthToken     SsoOAuthToken[]
  SsoRefreshSession SsoRefreshSession[]
  SsoUser           SsoUser[]

  @@index([public], map: "IDX_SSO_TENANTS__PUBLIC")
}
