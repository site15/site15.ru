/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from '@prisma/client/runtime/client';
import type * as Prisma from './prismaNamespace';

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client',
    },
    output: {
      value: '/home/endy/Projects/site15/site15.ru/libs/feature/metrics/src/lib/generated/prisma-client',
      fromEnvVar: null,
    },
    config: {
      moduleFormat: 'cjs',
      engineType: 'client',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'debian-openssl-3.0.x',
        native: true,
      },
    ],
    previewFeatures: ['driverAdapters', 'queryCompiler'],
    sourceFilePath: '/home/endy/Projects/site15/site15.ru/libs/feature/metrics/src/prisma/schema.prisma',
    isCustomOutput: true,
  },
  relativePath: '../../../prisma',
  clientVersion: '6.9.0',
  engineVersion: '81e4af48011447c3cc503a190e86995b66d2a28e',
  datasourceNames: ['db'],
  activeProvider: 'postgresql',
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'SITE_15_METRICS_DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider        = "prisma-client"\n  output          = "../../../../../libs/feature/metrics/src/lib/generated/prisma-client"\n  previewFeatures = ["driverAdapters", "queryCompiler"]\n  moduleFormat    = "cjs"\n}\n\ngenerator prismaClassGenerator {\n  provider                        = "prisma-generator-nestjs-dto"\n  output                          = "../lib/generated/rest/dto"\n  annotateAllDtoProperties        = "true"\n  classValidation                 = "true"\n  createDtoPrefix                 = "Create"\n  definiteAssignmentAssertion     = "true"\n  dtoSuffix                       = "Dto"\n  entityPrefix                    = ""\n  entitySuffix                    = ""\n  exportRelationModifierClasses   = "true"\n  fileNamingStyle                 = "kebab"\n  flatResourceStructure           = "false"\n  noDependencies                  = "false"\n  outputToNestJsResourceStructure = "false"\n  prettier                        = "true"\n  reExport                        = "false"\n  updateDtoPrefix                 = "Update"\n}\n\ndatasource db {\n  provider = "postgres"\n  url      = env("SITE_15_METRICS_DATABASE_URL")\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel MetricsGithubMetric {\n  id                                                     String                  @id(map: "PK_METRICS_GITHUB_METRIC") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  repositoryId                                           String                  @db.Uuid\n  metricName                                             String                  @db.VarChar(255)\n  metricValue                                            Float\n  recordedAt                                             DateTime                @db.Timestamp(6)\n  createdBy                                              String                  @db.Uuid\n  updatedBy                                              String                  @db.Uuid\n  createdAt                                              DateTime                @default(now()) @db.Timestamp(6)\n  updatedAt                                              DateTime                @default(now()) @db.Timestamp(6)\n  tenantId                                               String                  @db.Uuid\n  MetricsUser_MetricsGithubMetric_createdByToMetricsUser MetricsUser             @relation("MetricsGithubMetric_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__CREATED_BY")\n  MetricsGithubRepository                                MetricsGithubRepository @relation(fields: [repositoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__REPOSITORY_ID")\n  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser MetricsUser             @relation("MetricsGithubMetric_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__UPDATED_BY")\n\n  @@unique([tenantId, repositoryId, metricName, recordedAt], map: "UQ_METRICS_GITHUB_METRIC__REPOSITORY_METRIC_NAME_RECORDED_AT")\n  @@index([tenantId, repositoryId], map: "IDX_METRICS_GITHUB_METRIC__REPOSITORY_ID")\n  @@index([tenantId], map: "IDX_METRICS_GITHUB_METRIC__TENANT_ID")\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel MetricsGithubRepository {\n  id                                                         String                        @id(map: "PK_METRICS_GITHUB_REPOSITORY") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  name                                                       String                        @db.VarChar(255)\n  owner                                                      String                        @db.VarChar(255)\n  private                                                    Boolean\n  fork                                                       Boolean\n  createdBy                                                  String                        @db.Uuid\n  updatedBy                                                  String                        @db.Uuid\n  createdAt                                                  DateTime                      @default(now()) @db.Timestamp(6)\n  updatedAt                                                  DateTime                      @default(now()) @db.Timestamp(6)\n  tenantId                                                   String                        @db.Uuid\n  MetricsGithubMetric                                        MetricsGithubMetric[]\n  MetricsUser_MetricsGithubRepository_createdByToMetricsUser MetricsUser                   @relation("MetricsGithubRepository_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_REPOSITORY__CREATED_BY")\n  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser MetricsUser                   @relation("MetricsGithubRepository_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_REPOSITORY__UPDATED_BY")\n  MetricsGithubUserRepository                                MetricsGithubUserRepository[]\n\n  @@unique([tenantId, name, owner], map: "UQ_METRICS_GITHUB_REPOSITORY__NAME_OWNER")\n  @@index([tenantId], map: "IDX_METRICS_GITHUB_REPOSITORY__TENANT_ID")\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel MetricsGithubUser {\n  id                                                   String                        @id(map: "PK_METRICS_GITHUB_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  login                                                String                        @db.VarChar(255)\n  name                                                 String?                       @db.VarChar(255)\n  email                                                String?                       @db.VarChar(255)\n  createdBy                                            String                        @db.Uuid\n  updatedBy                                            String                        @db.Uuid\n  createdAt                                            DateTime                      @default(now()) @db.Timestamp(6)\n  updatedAt                                            DateTime                      @default(now()) @db.Timestamp(6)\n  tenantId                                             String                        @db.Uuid\n  MetricsUser_MetricsGithubUser_createdByToMetricsUser MetricsUser                   @relation("MetricsGithubUser_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER__CREATED_BY")\n  MetricsUser_MetricsGithubUser_updatedByToMetricsUser MetricsUser                   @relation("MetricsGithubUser_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER__UPDATED_BY")\n  MetricsGithubUserRepository                          MetricsGithubUserRepository[]\n\n  @@unique([tenantId, login], map: "UQ_METRICS_GITHUB_USER__LOGIN")\n  @@index([tenantId], map: "IDX_METRICS_GITHUB_USER__TENANT_ID")\n}\n\n/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nmodel MetricsGithubUserRepository {\n  id                                                             String                  @id(map: "PK_METRICS_GITHUB_USER_REPOSITORY") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  userId                                                         String                  @db.Uuid\n  repositoryId                                                   String                  @db.Uuid\n  role                                                           String                  @db.VarChar(50)\n  createdBy                                                      String                  @db.Uuid\n  updatedBy                                                      String                  @db.Uuid\n  createdAt                                                      DateTime                @default(now()) @db.Timestamp(6)\n  updatedAt                                                      DateTime                @default(now()) @db.Timestamp(6)\n  tenantId                                                       String                  @db.Uuid\n  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser MetricsUser             @relation("MetricsGithubUserRepository_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__CREATED_BY")\n  MetricsGithubRepository                                        MetricsGithubRepository @relation(fields: [repositoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__REPOSITORY_ID")\n  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser MetricsUser             @relation("MetricsGithubUserRepository_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__UPDATED_BY")\n  MetricsGithubUser                                              MetricsGithubUser       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__USER_ID")\n\n  @@unique([tenantId, userId, repositoryId], map: "UQ_METRICS_GITHUB_USER_REPOSITORY__USER_REPOSITORY")\n  @@index([tenantId], map: "IDX_METRICS_GITHUB_USER_REPOSITORY__TENANT_ID")\n}\n\nmodel MetricsUser {\n  id                                                                             String                        @id(map: "PK_METRICS_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid\n  tenantId                                                                       String                        @db.Uuid\n  externalUserId                                                                 String                        @db.Uuid\n  userRole                                                                       MetricsRole\n  createdAt                                                                      DateTime                      @default(now()) @db.Timestamp(6)\n  updatedAt                                                                      DateTime                      @default(now()) @db.Timestamp(6)\n  MetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUser                 MetricsGithubMetric[]         @relation("MetricsGithubMetric_createdByToMetricsUser")\n  MetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUser                 MetricsGithubMetric[]         @relation("MetricsGithubMetric_updatedByToMetricsUser")\n  MetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUser         MetricsGithubRepository[]     @relation("MetricsGithubRepository_createdByToMetricsUser")\n  MetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUser         MetricsGithubRepository[]     @relation("MetricsGithubRepository_updatedByToMetricsUser")\n  MetricsGithubUser_MetricsGithubUser_createdByToMetricsUser                     MetricsGithubUser[]           @relation("MetricsGithubUser_createdByToMetricsUser")\n  MetricsGithubUser_MetricsGithubUser_updatedByToMetricsUser                     MetricsGithubUser[]           @relation("MetricsGithubUser_updatedByToMetricsUser")\n  MetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUser MetricsGithubUserRepository[] @relation("MetricsGithubUserRepository_createdByToMetricsUser")\n  MetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUser MetricsGithubUserRepository[] @relation("MetricsGithubUserRepository_updatedByToMetricsUser")\n\n  @@unique([tenantId, externalUserId], map: "UQ_METRICS_USER")\n  @@index([tenantId], map: "IDX_METRICS_USER__TENANT_ID")\n  @@index([tenantId, userRole], map: "IDX_METRICS_USER__USER_ROLE")\n}\n\nmodel migrations_metrics {\n  installed_rank Int      @id(map: "__migrations_metrics_pk")\n  version        String?  @db.VarChar(50)\n  description    String   @db.VarChar(200)\n  type           String   @db.VarChar(20)\n  script         String   @db.VarChar(1000)\n  checksum       Int?\n  installed_by   String   @db.VarChar(100)\n  installed_on   DateTime @default(now()) @db.Timestamp(6)\n  execution_time Int\n  success        Boolean\n\n  @@index([success], map: "__migrations_metrics_s_idx")\n  @@map("__migrations_metrics")\n}\n\nenum MetricsRole {\n  Admin\n  User\n}\n',
  inlineSchemaHash: 'f989a48ee78dc986e2e5c348830488e4373c8edd83d4829727381b4de6616c7f',
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: '',
};

config.runtimeDataModel = JSON.parse(
  '{"models":{"MetricsGithubMetric":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"repositoryId","kind":"scalar","type":"String"},{"name":"metricName","kind":"scalar","type":"String"},{"name":"metricValue","kind":"scalar","type":"Float"},{"name":"recordedAt","kind":"scalar","type":"DateTime"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"tenantId","kind":"scalar","type":"String"},{"name":"MetricsUser_MetricsGithubMetric_createdByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubMetric_createdByToMetricsUser"},{"name":"MetricsGithubRepository","kind":"object","type":"MetricsGithubRepository","relationName":"MetricsGithubMetricToMetricsGithubRepository"},{"name":"MetricsUser_MetricsGithubMetric_updatedByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubMetric_updatedByToMetricsUser"}],"dbName":null},"MetricsGithubRepository":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"owner","kind":"scalar","type":"String"},{"name":"private","kind":"scalar","type":"Boolean"},{"name":"fork","kind":"scalar","type":"Boolean"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"tenantId","kind":"scalar","type":"String"},{"name":"MetricsGithubMetric","kind":"object","type":"MetricsGithubMetric","relationName":"MetricsGithubMetricToMetricsGithubRepository"},{"name":"MetricsUser_MetricsGithubRepository_createdByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubRepository_createdByToMetricsUser"},{"name":"MetricsUser_MetricsGithubRepository_updatedByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubRepository_updatedByToMetricsUser"},{"name":"MetricsGithubUserRepository","kind":"object","type":"MetricsGithubUserRepository","relationName":"MetricsGithubRepositoryToMetricsGithubUserRepository"}],"dbName":null},"MetricsGithubUser":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"login","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"tenantId","kind":"scalar","type":"String"},{"name":"MetricsUser_MetricsGithubUser_createdByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubUser_createdByToMetricsUser"},{"name":"MetricsUser_MetricsGithubUser_updatedByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubUser_updatedByToMetricsUser"},{"name":"MetricsGithubUserRepository","kind":"object","type":"MetricsGithubUserRepository","relationName":"MetricsGithubUserToMetricsGithubUserRepository"}],"dbName":null},"MetricsGithubUserRepository":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"repositoryId","kind":"scalar","type":"String"},{"name":"role","kind":"scalar","type":"String"},{"name":"createdBy","kind":"scalar","type":"String"},{"name":"updatedBy","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"tenantId","kind":"scalar","type":"String"},{"name":"MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubUserRepository_createdByToMetricsUser"},{"name":"MetricsGithubRepository","kind":"object","type":"MetricsGithubRepository","relationName":"MetricsGithubRepositoryToMetricsGithubUserRepository"},{"name":"MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser","kind":"object","type":"MetricsUser","relationName":"MetricsGithubUserRepository_updatedByToMetricsUser"},{"name":"MetricsGithubUser","kind":"object","type":"MetricsGithubUser","relationName":"MetricsGithubUserToMetricsGithubUserRepository"}],"dbName":null},"MetricsUser":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"tenantId","kind":"scalar","type":"String"},{"name":"externalUserId","kind":"scalar","type":"String"},{"name":"userRole","kind":"enum","type":"MetricsRole"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"MetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUser","kind":"object","type":"MetricsGithubMetric","relationName":"MetricsGithubMetric_createdByToMetricsUser"},{"name":"MetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUser","kind":"object","type":"MetricsGithubMetric","relationName":"MetricsGithubMetric_updatedByToMetricsUser"},{"name":"MetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUser","kind":"object","type":"MetricsGithubRepository","relationName":"MetricsGithubRepository_createdByToMetricsUser"},{"name":"MetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUser","kind":"object","type":"MetricsGithubRepository","relationName":"MetricsGithubRepository_updatedByToMetricsUser"},{"name":"MetricsGithubUser_MetricsGithubUser_createdByToMetricsUser","kind":"object","type":"MetricsGithubUser","relationName":"MetricsGithubUser_createdByToMetricsUser"},{"name":"MetricsGithubUser_MetricsGithubUser_updatedByToMetricsUser","kind":"object","type":"MetricsGithubUser","relationName":"MetricsGithubUser_updatedByToMetricsUser"},{"name":"MetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUser","kind":"object","type":"MetricsGithubUserRepository","relationName":"MetricsGithubUserRepository_createdByToMetricsUser"},{"name":"MetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUser","kind":"object","type":"MetricsGithubUserRepository","relationName":"MetricsGithubUserRepository_updatedByToMetricsUser"}],"dbName":null},"migrations_metrics":{"fields":[{"name":"installed_rank","kind":"scalar","type":"Int"},{"name":"version","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"script","kind":"scalar","type":"String"},{"name":"checksum","kind":"scalar","type":"Int"},{"name":"installed_by","kind":"scalar","type":"String"},{"name":"installed_on","kind":"scalar","type":"DateTime"},{"name":"execution_time","kind":"scalar","type":"Int"},{"name":"success","kind":"scalar","type":"Boolean"}],"dbName":"__migrations_metrics"}},"enums":{},"types":{}}',
);
config.engineWasm = undefined;
config.compilerWasm = {
  getRuntime: async () => await import('@prisma/client/runtime/query_compiler_bg.postgresql.mjs'),

  getQueryCompilerWasmModule: async () => {
    const { readFile } = await import('node:fs/promises');

    const wasmModulePath = require.resolve('@prisma/client/runtime/query_compiler_bg.postgresql.wasm');
    const wasmModuleBytes = await readFile(wasmModulePath);

    return new globalThis.WebAssembly.Module(wasmModuleBytes);
  },
};

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> = 'log' extends keyof ClientOptions
  ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
    ? Prisma.GetEvents<ClientOptions['log']>
    : never
  : never;

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MetricsGithubMetrics
   * const metricsGithubMetrics = await prisma.metricsGithubMetric.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    U = LogOptions<ClientOptions>,
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>,
  ): PrismaClient<ClientOptions, U, ExtArgs>;
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MetricsGithubMetrics
 * const metricsGithubMetrics = await prisma.metricsGithubMetric.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = LogOptions<ClientOptions>,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] };

  $on<V extends U>(
    eventType: V,
    callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void,
  ): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void;

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel },
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>;

  $transaction<R>(
    fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: Prisma.TransactionIsolationLevel },
  ): runtime.Types.Utils.JsPromise<R>;

  $extends: runtime.Types.Extensions.ExtendsHook<
    'extends',
    Prisma.TypeMapCb<ClientOptions>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<ClientOptions>,
      {
        extArgs: ExtArgs;
      }
    >
  >;

  /**
   * `prisma.metricsGithubMetric`: Exposes CRUD operations for the **MetricsGithubMetric** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MetricsGithubMetrics
   * const metricsGithubMetrics = await prisma.metricsGithubMetric.findMany()
   * ```
   */
  get metricsGithubMetric(): Prisma.MetricsGithubMetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricsGithubRepository`: Exposes CRUD operations for the **MetricsGithubRepository** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MetricsGithubRepositories
   * const metricsGithubRepositories = await prisma.metricsGithubRepository.findMany()
   * ```
   */
  get metricsGithubRepository(): Prisma.MetricsGithubRepositoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricsGithubUser`: Exposes CRUD operations for the **MetricsGithubUser** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MetricsGithubUsers
   * const metricsGithubUsers = await prisma.metricsGithubUser.findMany()
   * ```
   */
  get metricsGithubUser(): Prisma.MetricsGithubUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricsGithubUserRepository`: Exposes CRUD operations for the **MetricsGithubUserRepository** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MetricsGithubUserRepositories
   * const metricsGithubUserRepositories = await prisma.metricsGithubUserRepository.findMany()
   * ```
   */
  get metricsGithubUserRepository(): Prisma.MetricsGithubUserRepositoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricsUser`: Exposes CRUD operations for the **MetricsUser** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MetricsUsers
   * const metricsUsers = await prisma.metricsUser.findMany()
   * ```
   */
  get metricsUser(): Prisma.MetricsUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.migrations_metrics`: Exposes CRUD operations for the **migrations_metrics** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Migrations_metrics
   * const migrations_metrics = await prisma.migrations_metrics.findMany()
   * ```
   */
  get migrations_metrics(): Prisma.migrations_metricsDelegate<ExtArgs, ClientOptions>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname;
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor;
}
