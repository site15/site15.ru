/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from '@prisma/client/runtime/client';
import type * as Prisma from '../models';
import { type PrismaClient } from './class';

export type * from '../models';

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>;
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>;
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion: PrismaVersion = {
  client: '6.9.0',
  engine: '81e4af48011447c3cc503a190e86995b66d2a28e',
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? 'Please either choose `select` or `include`.'
  : T extends SelectAndOmit
    ? 'Please either choose `select` or `omit`.'
    : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object ? (U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : U) : T;

/**
 * Is T a Record?
 */
type IsObject<T extends any> =
  T extends Array<any>
    ? False
    : T extends Date
      ? False
      : T extends Uint8Array
        ? False
        : T extends BigInt
          ? False
          : T extends object
            ? True
            : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<O extends object, K extends Key, strict extends Boolean = 1> = O extends unknown
  ? _Either<O, K, strict>
  : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (U extends unknown ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ? (K extends keyof O ? { [P in K]: O[P] } & O : O) | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0;

export type Has<U extends Union, U1 extends Union> = Not<Extends<Exclude<U1, U>, U1>>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<T, U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>> = IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<Or<Extends<'OR', K>, Extends<'AND', K>>, Extends<'NOT', K>> extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>;

export const ModelName = {
  MetricsGithubMetric: 'MetricsGithubMetric',
  MetricsGithubRepository: 'MetricsGithubRepository',
  MetricsGithubUser: 'MetricsGithubUser',
  MetricsGithubUserRepository: 'MetricsGithubUserRepository',
  MetricsUser: 'MetricsUser',
  migrations_metrics: 'migrations_metrics',
  MetricsGithubRepositoryStatistics: 'MetricsGithubRepositoryStatistics',
  MetricsGithubTeam: 'MetricsGithubTeam',
  MetricsGithubTeamRepository: 'MetricsGithubTeamRepository',
  MetricsGithubTeamUser: 'MetricsGithubTeamUser',
  MetricsGithubUserStatistics: 'MetricsGithubUserStatistics',
  MetricsSettings: 'MetricsSettings',
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<ClientOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>;
}

export type TypeMap<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | 'metricsGithubMetric'
      | 'metricsGithubRepository'
      | 'metricsGithubUser'
      | 'metricsGithubUserRepository'
      | 'metricsUser'
      | 'migrations_metrics'
      | 'metricsGithubRepositoryStatistics'
      | 'metricsGithubTeam'
      | 'metricsGithubTeamRepository'
      | 'metricsGithubTeamUser'
      | 'metricsGithubUserStatistics'
      | 'metricsSettings';
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    MetricsGithubMetric: {
      payload: Prisma.$MetricsGithubMetricPayload<ExtArgs>;
      fields: Prisma.MetricsGithubMetricFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubMetricFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubMetricFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubMetricFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubMetricFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubMetricFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubMetricCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubMetricCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubMetricCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubMetricDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        update: {
          args: Prisma.MetricsGithubMetricUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubMetricDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubMetricUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubMetricUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubMetricUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubMetricPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubMetricAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubMetric>;
        };
        groupBy: {
          args: Prisma.MetricsGithubMetricGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubMetricGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubMetricCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubMetricCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubRepository: {
      payload: Prisma.$MetricsGithubRepositoryPayload<ExtArgs>;
      fields: Prisma.MetricsGithubRepositoryFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubRepositoryFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubRepositoryFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubRepositoryFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubRepositoryFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubRepositoryFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubRepositoryCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubRepositoryCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubRepositoryCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubRepositoryDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        update: {
          args: Prisma.MetricsGithubRepositoryUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubRepositoryDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubRepositoryUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubRepositoryUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubRepositoryUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubRepositoryAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubRepository>;
        };
        groupBy: {
          args: Prisma.MetricsGithubRepositoryGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubRepositoryGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubRepositoryCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubRepositoryCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubUser: {
      payload: Prisma.$MetricsGithubUserPayload<ExtArgs>;
      fields: Prisma.MetricsGithubUserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubUserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubUserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubUserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubUserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubUserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubUserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubUserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubUserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubUserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        update: {
          args: Prisma.MetricsGithubUserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubUserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubUserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubUserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubUserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubUserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubUser>;
        };
        groupBy: {
          args: Prisma.MetricsGithubUserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubUserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubUserRepository: {
      payload: Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>;
      fields: Prisma.MetricsGithubUserRepositoryFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubUserRepositoryFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubUserRepositoryFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubUserRepositoryFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubUserRepositoryFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubUserRepositoryFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubUserRepositoryCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubUserRepositoryCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubUserRepositoryCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubUserRepositoryDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        update: {
          args: Prisma.MetricsGithubUserRepositoryUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubUserRepositoryDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubUserRepositoryUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubUserRepositoryUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubUserRepositoryUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserRepositoryPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubUserRepositoryAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubUserRepository>;
        };
        groupBy: {
          args: Prisma.MetricsGithubUserRepositoryGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserRepositoryGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubUserRepositoryCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserRepositoryCountAggregateOutputType> | number;
        };
      };
    };
    MetricsUser: {
      payload: Prisma.$MetricsUserPayload<ExtArgs>;
      fields: Prisma.MetricsUserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsUserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsUserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        findFirst: {
          args: Prisma.MetricsUserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsUserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        findMany: {
          args: Prisma.MetricsUserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>[];
        };
        create: {
          args: Prisma.MetricsUserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        createMany: {
          args: Prisma.MetricsUserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsUserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>[];
        };
        delete: {
          args: Prisma.MetricsUserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        update: {
          args: Prisma.MetricsUserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsUserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsUserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsUserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>[];
        };
        upsert: {
          args: Prisma.MetricsUserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsUserPayload>;
        };
        aggregate: {
          args: Prisma.MetricsUserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsUser>;
        };
        groupBy: {
          args: Prisma.MetricsUserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsUserGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsUserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsUserCountAggregateOutputType> | number;
        };
      };
    };
    migrations_metrics: {
      payload: Prisma.$migrations_metricsPayload<ExtArgs>;
      fields: Prisma.migrations_metricsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.migrations_metricsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.migrations_metricsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        findFirst: {
          args: Prisma.migrations_metricsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.migrations_metricsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        findMany: {
          args: Prisma.migrations_metricsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>[];
        };
        create: {
          args: Prisma.migrations_metricsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        createMany: {
          args: Prisma.migrations_metricsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.migrations_metricsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>[];
        };
        delete: {
          args: Prisma.migrations_metricsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        update: {
          args: Prisma.migrations_metricsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        deleteMany: {
          args: Prisma.migrations_metricsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.migrations_metricsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.migrations_metricsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>[];
        };
        upsert: {
          args: Prisma.migrations_metricsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$migrations_metricsPayload>;
        };
        aggregate: {
          args: Prisma.Migrations_metricsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMigrations_metrics>;
        };
        groupBy: {
          args: Prisma.migrations_metricsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.Migrations_metricsGroupByOutputType>[];
        };
        count: {
          args: Prisma.migrations_metricsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.Migrations_metricsCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubRepositoryStatistics: {
      payload: Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>;
      fields: Prisma.MetricsGithubRepositoryStatisticsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubRepositoryStatisticsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubRepositoryStatisticsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubRepositoryStatisticsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubRepositoryStatisticsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubRepositoryStatisticsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubRepositoryStatisticsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubRepositoryStatisticsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubRepositoryStatisticsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubRepositoryStatisticsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        update: {
          args: Prisma.MetricsGithubRepositoryStatisticsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubRepositoryStatisticsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubRepositoryStatisticsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubRepositoryStatisticsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubRepositoryStatisticsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubRepositoryStatisticsPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubRepositoryStatisticsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubRepositoryStatistics>;
        };
        groupBy: {
          args: Prisma.MetricsGithubRepositoryStatisticsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubRepositoryStatisticsGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubRepositoryStatisticsCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.MetricsGithubRepositoryStatisticsCountAggregateOutputType>
            | number;
        };
      };
    };
    MetricsGithubTeam: {
      payload: Prisma.$MetricsGithubTeamPayload<ExtArgs>;
      fields: Prisma.MetricsGithubTeamFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubTeamFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubTeamFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubTeamFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubTeamFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubTeamFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubTeamCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubTeamCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubTeamCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubTeamDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        update: {
          args: Prisma.MetricsGithubTeamUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubTeamDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubTeamUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubTeamUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubTeamUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubTeamAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubTeam>;
        };
        groupBy: {
          args: Prisma.MetricsGithubTeamGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubTeamCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubTeamRepository: {
      payload: Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>;
      fields: Prisma.MetricsGithubTeamRepositoryFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubTeamRepositoryFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubTeamRepositoryFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubTeamRepositoryFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubTeamRepositoryFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubTeamRepositoryFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubTeamRepositoryCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubTeamRepositoryCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubTeamRepositoryCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubTeamRepositoryDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        update: {
          args: Prisma.MetricsGithubTeamRepositoryUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubTeamRepositoryDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubTeamRepositoryUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubTeamRepositoryUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubTeamRepositoryUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamRepositoryPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubTeamRepositoryAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubTeamRepository>;
        };
        groupBy: {
          args: Prisma.MetricsGithubTeamRepositoryGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamRepositoryGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubTeamRepositoryCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamRepositoryCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubTeamUser: {
      payload: Prisma.$MetricsGithubTeamUserPayload<ExtArgs>;
      fields: Prisma.MetricsGithubTeamUserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubTeamUserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubTeamUserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubTeamUserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubTeamUserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubTeamUserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubTeamUserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubTeamUserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubTeamUserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubTeamUserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        update: {
          args: Prisma.MetricsGithubTeamUserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubTeamUserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubTeamUserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubTeamUserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubTeamUserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubTeamUserPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubTeamUserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubTeamUser>;
        };
        groupBy: {
          args: Prisma.MetricsGithubTeamUserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamUserGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubTeamUserCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubTeamUserCountAggregateOutputType> | number;
        };
      };
    };
    MetricsGithubUserStatistics: {
      payload: Prisma.$MetricsGithubUserStatisticsPayload<ExtArgs>;
      fields: Prisma.MetricsGithubUserStatisticsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsGithubUserStatisticsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsGithubUserStatisticsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        findFirst: {
          args: Prisma.MetricsGithubUserStatisticsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsGithubUserStatisticsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        findMany: {
          args: Prisma.MetricsGithubUserStatisticsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>[];
        };
        create: {
          args: Prisma.MetricsGithubUserStatisticsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        createMany: {
          args: Prisma.MetricsGithubUserStatisticsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsGithubUserStatisticsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>[];
        };
        delete: {
          args: Prisma.MetricsGithubUserStatisticsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        update: {
          args: Prisma.MetricsGithubUserStatisticsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsGithubUserStatisticsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsGithubUserStatisticsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsGithubUserStatisticsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>[];
        };
        upsert: {
          args: Prisma.MetricsGithubUserStatisticsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsGithubUserStatisticsPayload>;
        };
        aggregate: {
          args: Prisma.MetricsGithubUserStatisticsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsGithubUserStatistics>;
        };
        groupBy: {
          args: Prisma.MetricsGithubUserStatisticsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserStatisticsGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsGithubUserStatisticsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsGithubUserStatisticsCountAggregateOutputType> | number;
        };
      };
    };
    MetricsSettings: {
      payload: Prisma.$MetricsSettingsPayload<ExtArgs>;
      fields: Prisma.MetricsSettingsFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MetricsSettingsFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MetricsSettingsFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        findFirst: {
          args: Prisma.MetricsSettingsFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MetricsSettingsFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        findMany: {
          args: Prisma.MetricsSettingsFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>[];
        };
        create: {
          args: Prisma.MetricsSettingsCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        createMany: {
          args: Prisma.MetricsSettingsCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MetricsSettingsCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>[];
        };
        delete: {
          args: Prisma.MetricsSettingsDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        update: {
          args: Prisma.MetricsSettingsUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        deleteMany: {
          args: Prisma.MetricsSettingsDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MetricsSettingsUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MetricsSettingsUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>[];
        };
        upsert: {
          args: Prisma.MetricsSettingsUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricsSettingsPayload>;
        };
        aggregate: {
          args: Prisma.MetricsSettingsAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetricsSettings>;
        };
        groupBy: {
          args: Prisma.MetricsSettingsGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsSettingsGroupByOutputType>[];
        };
        count: {
          args: Prisma.MetricsSettingsCountArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MetricsSettingsCountAggregateOutputType> | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
} as const);

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const MetricsGithubMetricScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  metricName: 'metricName',
  metricValue: 'metricValue',
  recordedAt: 'recordedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubMetricScalarFieldEnum =
  (typeof MetricsGithubMetricScalarFieldEnum)[keyof typeof MetricsGithubMetricScalarFieldEnum];

export const MetricsGithubRepositoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  owner: 'owner',
  private: 'private',
  fork: 'fork',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
  description: 'description',
  url: 'url',
} as const;

export type MetricsGithubRepositoryScalarFieldEnum =
  (typeof MetricsGithubRepositoryScalarFieldEnum)[keyof typeof MetricsGithubRepositoryScalarFieldEnum];

export const MetricsGithubUserScalarFieldEnum = {
  id: 'id',
  login: 'login',
  name: 'name',
  email: 'email',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
  description: 'description',
  avatarUrl: 'avatarUrl',
  websiteUrl: 'websiteUrl',
  location: 'location',
  telegramUrl: 'telegramUrl',
  twitterUrl: 'twitterUrl',
} as const;

export type MetricsGithubUserScalarFieldEnum =
  (typeof MetricsGithubUserScalarFieldEnum)[keyof typeof MetricsGithubUserScalarFieldEnum];

export const MetricsGithubUserRepositoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  repositoryId: 'repositoryId',
  role: 'role',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubUserRepositoryScalarFieldEnum =
  (typeof MetricsGithubUserRepositoryScalarFieldEnum)[keyof typeof MetricsGithubUserRepositoryScalarFieldEnum];

export const MetricsUserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  externalUserId: 'externalUserId',
  userRole: 'userRole',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  botForDataSync: 'botForDataSync',
} as const;

export type MetricsUserScalarFieldEnum = (typeof MetricsUserScalarFieldEnum)[keyof typeof MetricsUserScalarFieldEnum];

export const Migrations_metricsScalarFieldEnum = {
  installed_rank: 'installed_rank',
  version: 'version',
  description: 'description',
  type: 'type',
  script: 'script',
  checksum: 'checksum',
  installed_by: 'installed_by',
  installed_on: 'installed_on',
  execution_time: 'execution_time',
  success: 'success',
} as const;

export type Migrations_metricsScalarFieldEnum =
  (typeof Migrations_metricsScalarFieldEnum)[keyof typeof Migrations_metricsScalarFieldEnum];

export const MetricsGithubRepositoryStatisticsScalarFieldEnum = {
  id: 'id',
  repositoryId: 'repositoryId',
  periodType: 'periodType',
  starsCount: 'starsCount',
  forksCount: 'forksCount',
  contributorsCount: 'contributorsCount',
  commitsCount: 'commitsCount',
  lastCommitDate: 'lastCommitDate',
  recordedAt: 'recordedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubRepositoryStatisticsScalarFieldEnum =
  (typeof MetricsGithubRepositoryStatisticsScalarFieldEnum)[keyof typeof MetricsGithubRepositoryStatisticsScalarFieldEnum];

export const MetricsGithubTeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubTeamScalarFieldEnum =
  (typeof MetricsGithubTeamScalarFieldEnum)[keyof typeof MetricsGithubTeamScalarFieldEnum];

export const MetricsGithubTeamRepositoryScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  repositoryId: 'repositoryId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubTeamRepositoryScalarFieldEnum =
  (typeof MetricsGithubTeamRepositoryScalarFieldEnum)[keyof typeof MetricsGithubTeamRepositoryScalarFieldEnum];

export const MetricsGithubTeamUserScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  role: 'role',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubTeamUserScalarFieldEnum =
  (typeof MetricsGithubTeamUserScalarFieldEnum)[keyof typeof MetricsGithubTeamUserScalarFieldEnum];

export const MetricsGithubUserStatisticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  periodType: 'periodType',
  followersCount: 'followersCount',
  followingCount: 'followingCount',
  recordedAt: 'recordedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tenantId: 'tenantId',
} as const;

export type MetricsGithubUserStatisticsScalarFieldEnum =
  (typeof MetricsGithubUserStatisticsScalarFieldEnum)[keyof typeof MetricsGithubUserStatisticsScalarFieldEnum];

export const MetricsSettingsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  enabled: 'enabled',
  githubToken: 'githubToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type MetricsSettingsScalarFieldEnum =
  (typeof MetricsSettingsScalarFieldEnum)[keyof typeof MetricsSettingsScalarFieldEnum];

export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
  first: 'first',
  last: 'last',
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>;

/**
 * Reference to a field of type 'MetricsRole'
 */
export type EnumMetricsRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricsRole'>;

/**
 * Reference to a field of type 'MetricsRole[]'
 */
export type ListEnumMetricsRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricsRole[]'>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  'define',
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal';
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null;
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  metricsGithubMetric?: Prisma.MetricsGithubMetricOmit;
  metricsGithubRepository?: Prisma.MetricsGithubRepositoryOmit;
  metricsGithubUser?: Prisma.MetricsGithubUserOmit;
  metricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryOmit;
  metricsUser?: Prisma.MetricsUserOmit;
  migrations_metrics?: Prisma.migrations_metricsOmit;
  metricsGithubRepositoryStatistics?: Prisma.MetricsGithubRepositoryStatisticsOmit;
  metricsGithubTeam?: Prisma.MetricsGithubTeamOmit;
  metricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryOmit;
  metricsGithubTeamUser?: Prisma.MetricsGithubTeamUserOmit;
  metricsGithubUserStatistics?: Prisma.MetricsGithubUserStatisticsOmit;
  metricsSettings?: Prisma.MetricsSettingsOmit;
};

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error';
export type LogDefinition = {
  level: LogLevel;
  emit: 'stdout' | 'event';
};

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition
  ? T['emit'] extends 'event'
    ? T['level']
    : never
  : never;
export type GetEvents<T extends any> =
  T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy';

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName;
  action: PrismaAction;
  args: any;
  dataPath: string[];
  runInTransaction: boolean;
};

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>;

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>;
