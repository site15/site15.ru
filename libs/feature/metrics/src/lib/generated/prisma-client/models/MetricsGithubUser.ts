/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubUser
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubUserModel = runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubUserPayload>;

export type AggregateMetricsGithubUser = {
  _count: MetricsGithubUserCountAggregateOutputType | null;
  _min: MetricsGithubUserMinAggregateOutputType | null;
  _max: MetricsGithubUserMaxAggregateOutputType | null;
};

export type MetricsGithubUserMinAggregateOutputType = {
  id: string | null;
  login: string | null;
  name: string | null;
  email: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubUserMaxAggregateOutputType = {
  id: string | null;
  login: string | null;
  name: string | null;
  email: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubUserCountAggregateOutputType = {
  id: number;
  login: number;
  name: number;
  email: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubUserMinAggregateInputType = {
  id?: true;
  login?: true;
  name?: true;
  email?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubUserMaxAggregateInputType = {
  id?: true;
  login?: true;
  name?: true;
  email?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubUserCountAggregateInputType = {
  id?: true;
  login?: true;
  name?: true;
  email?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubUserAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubUser to aggregate.
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUsers to fetch.
   */
  orderBy?: Prisma.MetricsGithubUserOrderByWithRelationInput | Prisma.MetricsGithubUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubUsers
   **/
  _count?: true | MetricsGithubUserCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubUserMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubUserMaxAggregateInputType;
};

export type GetMetricsGithubUserAggregateType<T extends MetricsGithubUserAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubUser[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubUser[P]>;
};

export type MetricsGithubUserGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubUserWhereInput;
  orderBy?: Prisma.MetricsGithubUserOrderByWithAggregationInput | Prisma.MetricsGithubUserOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubUserScalarFieldEnum[] | Prisma.MetricsGithubUserScalarFieldEnum;
  having?: Prisma.MetricsGithubUserScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubUserCountAggregateInputType | true;
  _min?: MetricsGithubUserMinAggregateInputType;
  _max?: MetricsGithubUserMaxAggregateInputType;
};

export type MetricsGithubUserGroupByOutputType = {
  id: string;
  login: string;
  name: string | null;
  email: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubUserCountAggregateOutputType | null;
  _min: MetricsGithubUserMinAggregateOutputType | null;
  _max: MetricsGithubUserMaxAggregateOutputType | null;
};

type GetMetricsGithubUserGroupByPayload<T extends MetricsGithubUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsGithubUserGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsGithubUserGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsGithubUserGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsGithubUserGroupByOutputType[P]>;
    }
  >
>;

export type MetricsGithubUserWhereInput = {
  AND?: Prisma.MetricsGithubUserWhereInput | Prisma.MetricsGithubUserWhereInput[];
  OR?: Prisma.MetricsGithubUserWhereInput[];
  NOT?: Prisma.MetricsGithubUserWhereInput | Prisma.MetricsGithubUserWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  login?: Prisma.StringFilter<'MetricsGithubUser'> | string;
  name?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
  email?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryListRelationFilter;
};

export type MetricsGithubUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  login?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryOrderByRelationAggregateInput;
};

export type MetricsGithubUserWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_login?: Prisma.MetricsGithubUserTenantIdLoginCompoundUniqueInput;
    AND?: Prisma.MetricsGithubUserWhereInput | Prisma.MetricsGithubUserWhereInput[];
    OR?: Prisma.MetricsGithubUserWhereInput[];
    NOT?: Prisma.MetricsGithubUserWhereInput | Prisma.MetricsGithubUserWhereInput[];
    login?: Prisma.StringFilter<'MetricsGithubUser'> | string;
    name?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
    email?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
    createdBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
    MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryListRelationFilter;
  },
  'id' | 'tenantId_login'
>;

export type MetricsGithubUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  login?: Prisma.SortOrder;
  name?: Prisma.SortOrderInput | Prisma.SortOrder;
  email?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubUserCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubUserMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubUserMinOrderByAggregateInput;
};

export type MetricsGithubUserScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubUserScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubUserScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubUserScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubUserScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubUserScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUser'> | string;
  login?: Prisma.StringWithAggregatesFilter<'MetricsGithubUser'> | string;
  name?: Prisma.StringNullableWithAggregatesFilter<'MetricsGithubUser'> | string | null;
  email?: Prisma.StringNullableWithAggregatesFilter<'MetricsGithubUser'> | string | null;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUser'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUser'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubUser'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubUser'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUser'> | string;
};

export type MetricsGithubUserCreateInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserUncheckedCreateInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserCreateManyInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserTenantIdLoginCompoundUniqueInput = {
  tenantId: string;
  login: string;
};

export type MetricsGithubUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  login?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  login?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  login?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserScalarRelationFilter = {
  is?: Prisma.MetricsGithubUserWhereInput;
  isNot?: Prisma.MetricsGithubUserWhereInput;
};

export type MetricsGithubUserListRelationFilter = {
  every?: Prisma.MetricsGithubUserWhereInput;
  some?: Prisma.MetricsGithubUserWhereInput;
  none?: Prisma.MetricsGithubUserWhereInput;
};

export type MetricsGithubUserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null;
};

export type MetricsGithubUserCreateNestedOneWithoutMetricsGithubUserRepositoryInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsGithubUserRepositoryInput;
  connect?: Prisma.MetricsGithubUserWhereUniqueInput;
};

export type MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsGithubUserRepositoryInput;
  upsert?: Prisma.MetricsGithubUserUpsertWithoutMetricsGithubUserRepositoryInput;
  connect?: Prisma.MetricsGithubUserWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MetricsGithubUserUpdateToOneWithWhereWithoutMetricsGithubUserRepositoryInput,
      Prisma.MetricsGithubUserUpdateWithoutMetricsGithubUserRepositoryInput
    >,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubUserCreateNestedManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
        Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
};

export type MetricsGithubUserCreateNestedManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
        Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
};

export type MetricsGithubUserUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  };

export type MetricsGithubUserUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  };

export type MetricsGithubUserUpdateManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
        Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
};

export type MetricsGithubUserUpdateManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
        Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
};

export type MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
  };

export type MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserWhereUniqueInput | Prisma.MetricsGithubUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
  };

export type MetricsGithubUserCreateWithoutMetricsGithubUserRepositoryInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserInput;
};

export type MetricsGithubUserUncheckedCreateWithoutMetricsGithubUserRepositoryInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserCreateOrConnectWithoutMetricsGithubUserRepositoryInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubUserUpsertWithoutMetricsGithubUserRepositoryInput = {
  update: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  where?: Prisma.MetricsGithubUserWhereInput;
};

export type MetricsGithubUserUpdateToOneWithWhereWithoutMetricsGithubUserRepositoryInput = {
  where?: Prisma.MetricsGithubUserWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubUserUpdateWithoutMetricsGithubUserRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateWithoutMetricsGithubUserRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
  >;
};

export type MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubUserInput;
};

export type MetricsGithubUserCreateOrConnectWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
  >;
};

export type MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
  >;
};

export type MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateManyMutationInput,
    Prisma.MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput
  >;
};

export type MetricsGithubUserScalarWhereInput = {
  AND?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
  OR?: Prisma.MetricsGithubUserScalarWhereInput[];
  NOT?: Prisma.MetricsGithubUserScalarWhereInput | Prisma.MetricsGithubUserScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  login?: Prisma.StringFilter<'MetricsGithubUser'> | string;
  name?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
  email?: Prisma.StringNullableFilter<'MetricsGithubUser'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUser'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubUser'> | string;
};

export type MetricsGithubUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedCreateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput,
    Prisma.MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserUpdateManyMutationInput,
    Prisma.MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserCreateManyMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: string;
  login: string;
  name?: string | null;
  email?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_updatedByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUser_MetricsGithubUser_createdByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserNestedInput;
};

export type MetricsGithubUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUser_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  login?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type MetricsGithubUserCountOutputType
 */

export type MetricsGithubUserCountOutputType = {
  MetricsGithubUserRepository: number;
};

export type MetricsGithubUserCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsGithubUserRepository?: boolean | MetricsGithubUserCountOutputTypeCountMetricsGithubUserRepositoryArgs;
};

/**
 * MetricsGithubUserCountOutputType without action
 */
export type MetricsGithubUserCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserCountOutputType
   */
  select?: Prisma.MetricsGithubUserCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MetricsGithubUserCountOutputType without action
 */
export type MetricsGithubUserCountOutputTypeCountMetricsGithubUserRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
};

export type MetricsGithubUserSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    login?: boolean;
    name?: boolean;
    email?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUserRepository?: boolean | Prisma.MetricsGithubUser$MetricsGithubUserRepositoryArgs<ExtArgs>;
    _count?: boolean | Prisma.MetricsGithubUserCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUser']
>;

export type MetricsGithubUserSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    login?: boolean;
    name?: boolean;
    email?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUser']
>;

export type MetricsGithubUserSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    login?: boolean;
    name?: boolean;
    email?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUser']
>;

export type MetricsGithubUserSelectScalar = {
  id?: boolean;
  login?: boolean;
  name?: boolean;
  email?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubUserOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'login' | 'name' | 'email' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubUser']
>;
export type MetricsGithubUserInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUserRepository?: boolean | Prisma.MetricsGithubUser$MetricsGithubUserRepositoryArgs<ExtArgs>;
  _count?: boolean | Prisma.MetricsGithubUserCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MetricsGithubUserIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubUserIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubUserPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubUser';
  objects: {
    MetricsUser_MetricsGithubUser_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsUser_MetricsGithubUser_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubUserRepository: Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      login: string;
      name: string | null;
      email: string | null;
      createdBy: string;
      updatedBy: string;
      createdAt: Date;
      updatedAt: Date;
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubUser']
  >;
  composites: {};
};

export type MetricsGithubUserGetPayload<S extends boolean | null | undefined | MetricsGithubUserDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload, S>;

export type MetricsGithubUserCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubUserCountAggregateInputType | true;
};

export interface MetricsGithubUserDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubUser']; meta: { name: 'MetricsGithubUser' } };
  /**
   * Find zero or one MetricsGithubUser that matches the filter.
   * @param {MetricsGithubUserFindUniqueArgs} args - Arguments to find a MetricsGithubUser
   * @example
   * // Get one MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubUserFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubUser
   * @example
   * // Get one MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubUserFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserFindFirstArgs} args - Arguments to find a MetricsGithubUser
   * @example
   * // Get one MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubUserFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubUser
   * @example
   * // Get one MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubUserFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubUsers
   * const metricsGithubUsers = await prisma.metricsGithubUser.findMany()
   *
   * // Get first 10 MetricsGithubUsers
   * const metricsGithubUsers = await prisma.metricsGithubUser.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubUserWithIdOnly = await prisma.metricsGithubUser.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubUserFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsGithubUser.
   * @param {MetricsGithubUserCreateArgs} args - Arguments to create a MetricsGithubUser.
   * @example
   * // Create one MetricsGithubUser
   * const MetricsGithubUser = await prisma.metricsGithubUser.create({
   *   data: {
   *     // ... data to create a MetricsGithubUser
   *   }
   * })
   *
   */
  create<T extends MetricsGithubUserCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubUsers.
   * @param {MetricsGithubUserCreateManyArgs} args - Arguments to create many MetricsGithubUsers.
   * @example
   * // Create many MetricsGithubUsers
   * const metricsGithubUser = await prisma.metricsGithubUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubUserCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubUsers and returns the data saved in the database.
   * @param {MetricsGithubUserCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubUsers.
   * @example
   * // Create many MetricsGithubUsers
   * const metricsGithubUser = await prisma.metricsGithubUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubUsers and only return the `id`
   * const metricsGithubUserWithIdOnly = await prisma.metricsGithubUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubUserCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubUser.
   * @param {MetricsGithubUserDeleteArgs} args - Arguments to delete one MetricsGithubUser.
   * @example
   * // Delete one MetricsGithubUser
   * const MetricsGithubUser = await prisma.metricsGithubUser.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubUser
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubUserDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubUser.
   * @param {MetricsGithubUserUpdateArgs} args - Arguments to update one MetricsGithubUser.
   * @example
   * // Update one MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubUserUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubUsers.
   * @param {MetricsGithubUserDeleteManyArgs} args - Arguments to filter MetricsGithubUsers to delete.
   * @example
   * // Delete a few MetricsGithubUsers
   * const { count } = await prisma.metricsGithubUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubUserDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubUsers
   * const metricsGithubUser = await prisma.metricsGithubUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubUserUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubUsers and returns the data updated in the database.
   * @param {MetricsGithubUserUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubUsers.
   * @example
   * // Update many MetricsGithubUsers
   * const metricsGithubUser = await prisma.metricsGithubUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubUsers and only return the `id`
   * const metricsGithubUserWithIdOnly = await prisma.metricsGithubUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubUserUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubUser.
   * @param {MetricsGithubUserUpsertArgs} args - Arguments to update or create a MetricsGithubUser.
   * @example
   * // Update or create a MetricsGithubUser
   * const metricsGithubUser = await prisma.metricsGithubUser.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubUser we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubUserUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserCountArgs} args - Arguments to filter MetricsGithubUsers to count.
   * @example
   * // Count the number of MetricsGithubUsers
   * const count = await prisma.metricsGithubUser.count({
   *   where: {
   *     // ... the filter for the MetricsGithubUsers we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubUserCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubUserCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubUserAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubUserAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubUserAggregateType<T>>;

  /**
   * Group by MetricsGithubUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubUserGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubUserGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubUser model
   */
  readonly fields: MetricsGithubUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubUserClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubUser_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubUserRepository<T extends Prisma.MetricsGithubUser$MetricsGithubUserRepositoryArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubUser$MetricsGithubUserRepositoryArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubUser model
 */
export interface MetricsGithubUserFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly login: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly name: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly email: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubUser', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubUser', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubUser', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubUser findUnique
 */
export type MetricsGithubUserFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUser to fetch.
   */
  where: Prisma.MetricsGithubUserWhereUniqueInput;
};

/**
 * MetricsGithubUser findUniqueOrThrow
 */
export type MetricsGithubUserFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUser to fetch.
   */
  where: Prisma.MetricsGithubUserWhereUniqueInput;
};

/**
 * MetricsGithubUser findFirst
 */
export type MetricsGithubUserFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUser to fetch.
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUsers to fetch.
   */
  orderBy?: Prisma.MetricsGithubUserOrderByWithRelationInput | Prisma.MetricsGithubUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubUsers.
   */
  cursor?: Prisma.MetricsGithubUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubUsers.
   */
  distinct?: Prisma.MetricsGithubUserScalarFieldEnum | Prisma.MetricsGithubUserScalarFieldEnum[];
};

/**
 * MetricsGithubUser findFirstOrThrow
 */
export type MetricsGithubUserFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUser to fetch.
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUsers to fetch.
   */
  orderBy?: Prisma.MetricsGithubUserOrderByWithRelationInput | Prisma.MetricsGithubUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubUsers.
   */
  cursor?: Prisma.MetricsGithubUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubUsers.
   */
  distinct?: Prisma.MetricsGithubUserScalarFieldEnum | Prisma.MetricsGithubUserScalarFieldEnum[];
};

/**
 * MetricsGithubUser findMany
 */
export type MetricsGithubUserFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUsers to fetch.
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUsers to fetch.
   */
  orderBy?: Prisma.MetricsGithubUserOrderByWithRelationInput | Prisma.MetricsGithubUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubUsers.
   */
  cursor?: Prisma.MetricsGithubUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUsers.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubUserScalarFieldEnum | Prisma.MetricsGithubUserScalarFieldEnum[];
};

/**
 * MetricsGithubUser create
 */
export type MetricsGithubUserCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubUser.
   */
  data: Prisma.XOR<Prisma.MetricsGithubUserCreateInput, Prisma.MetricsGithubUserUncheckedCreateInput>;
};

/**
 * MetricsGithubUser createMany
 */
export type MetricsGithubUserCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubUsers.
   */
  data: Prisma.MetricsGithubUserCreateManyInput | Prisma.MetricsGithubUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubUser createManyAndReturn
 */
export type MetricsGithubUserCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubUsers.
   */
  data: Prisma.MetricsGithubUserCreateManyInput | Prisma.MetricsGithubUserCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubUser update
 */
export type MetricsGithubUserUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubUser.
   */
  data: Prisma.XOR<Prisma.MetricsGithubUserUpdateInput, Prisma.MetricsGithubUserUncheckedUpdateInput>;
  /**
   * Choose, which MetricsGithubUser to update.
   */
  where: Prisma.MetricsGithubUserWhereUniqueInput;
};

/**
 * MetricsGithubUser updateMany
 */
export type MetricsGithubUserUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubUsers.
   */
  data: Prisma.XOR<Prisma.MetricsGithubUserUpdateManyMutationInput, Prisma.MetricsGithubUserUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsGithubUsers to update
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * Limit how many MetricsGithubUsers to update.
   */
  limit?: number;
};

/**
 * MetricsGithubUser updateManyAndReturn
 */
export type MetricsGithubUserUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubUsers.
   */
  data: Prisma.XOR<Prisma.MetricsGithubUserUpdateManyMutationInput, Prisma.MetricsGithubUserUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsGithubUsers to update
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * Limit how many MetricsGithubUsers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubUser upsert
 */
export type MetricsGithubUserUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubUser to update in case it exists.
   */
  where: Prisma.MetricsGithubUserWhereUniqueInput;
  /**
   * In case the MetricsGithubUser found by the `where` argument doesn't exist, create a new MetricsGithubUser with this data.
   */
  create: Prisma.XOR<Prisma.MetricsGithubUserCreateInput, Prisma.MetricsGithubUserUncheckedCreateInput>;
  /**
   * In case the MetricsGithubUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsGithubUserUpdateInput, Prisma.MetricsGithubUserUncheckedUpdateInput>;
};

/**
 * MetricsGithubUser delete
 */
export type MetricsGithubUserDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubUser to delete.
   */
  where: Prisma.MetricsGithubUserWhereUniqueInput;
};

/**
 * MetricsGithubUser deleteMany
 */
export type MetricsGithubUserDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubUsers to delete
   */
  where?: Prisma.MetricsGithubUserWhereInput;
  /**
   * Limit how many MetricsGithubUsers to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubUser.MetricsGithubUserRepository
 */
export type MetricsGithubUser$MetricsGithubUserRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MetricsGithubUserRepositoryScalarFieldEnum | Prisma.MetricsGithubUserRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubUser without action
 */
export type MetricsGithubUserDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUser
   */
  select?: Prisma.MetricsGithubUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUser
   */
  omit?: Prisma.MetricsGithubUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserInclude<ExtArgs> | null;
};
