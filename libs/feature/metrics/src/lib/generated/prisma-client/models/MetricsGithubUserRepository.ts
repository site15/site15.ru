/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubUserRepository` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubUserRepository
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubUserRepositoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubUserRepositoryPayload>;

export type AggregateMetricsGithubUserRepository = {
  _count: MetricsGithubUserRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubUserRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubUserRepositoryMaxAggregateOutputType | null;
};

export type MetricsGithubUserRepositoryMinAggregateOutputType = {
  id: string | null;
  userId: string | null;
  repositoryId: string | null;
  role: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubUserRepositoryMaxAggregateOutputType = {
  id: string | null;
  userId: string | null;
  repositoryId: string | null;
  role: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubUserRepositoryCountAggregateOutputType = {
  id: number;
  userId: number;
  repositoryId: number;
  role: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubUserRepositoryMinAggregateInputType = {
  id?: true;
  userId?: true;
  repositoryId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubUserRepositoryMaxAggregateInputType = {
  id?: true;
  userId?: true;
  repositoryId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubUserRepositoryCountAggregateInputType = {
  id?: true;
  userId?: true;
  repositoryId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubUserRepositoryAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubUserRepository to aggregate.
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUserRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUserRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUserRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubUserRepositories
   **/
  _count?: true | MetricsGithubUserRepositoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubUserRepositoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubUserRepositoryMaxAggregateInputType;
};

export type GetMetricsGithubUserRepositoryAggregateType<T extends MetricsGithubUserRepositoryAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubUserRepository]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubUserRepository[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubUserRepository[P]>;
};

export type MetricsGithubUserRepositoryGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithAggregationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubUserRepositoryScalarFieldEnum[] | Prisma.MetricsGithubUserRepositoryScalarFieldEnum;
  having?: Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubUserRepositoryCountAggregateInputType | true;
  _min?: MetricsGithubUserRepositoryMinAggregateInputType;
  _max?: MetricsGithubUserRepositoryMaxAggregateInputType;
};

export type MetricsGithubUserRepositoryGroupByOutputType = {
  id: string;
  userId: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubUserRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubUserRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubUserRepositoryMaxAggregateOutputType | null;
};

type GetMetricsGithubUserRepositoryGroupByPayload<T extends MetricsGithubUserRepositoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MetricsGithubUserRepositoryGroupByOutputType, T['by']> & {
        [P in keyof T & keyof MetricsGithubUserRepositoryGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetricsGithubUserRepositoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetricsGithubUserRepositoryGroupByOutputType[P]>;
      }
    >
  >;

export type MetricsGithubUserRepositoryWhereInput = {
  AND?: Prisma.MetricsGithubUserRepositoryWhereInput | Prisma.MetricsGithubUserRepositoryWhereInput[];
  OR?: Prisma.MetricsGithubUserRepositoryWhereInput[];
  NOT?: Prisma.MetricsGithubUserRepositoryWhereInput | Prisma.MetricsGithubUserRepositoryWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  userId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  role?: Prisma.StringFilter<'MetricsGithubUserRepository'> | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubRepository?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryScalarRelationFilter,
    Prisma.MetricsGithubRepositoryWhereInput
  >;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubUser?: Prisma.XOR<Prisma.MetricsGithubUserScalarRelationFilter, Prisma.MetricsGithubUserWhereInput>;
};

export type MetricsGithubUserRepositoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryOrderByWithRelationInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserOrderByWithRelationInput;
};

export type MetricsGithubUserRepositoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_userId_repositoryId?: Prisma.MetricsGithubUserRepositoryTenantIdUserIdRepositoryIdCompoundUniqueInput;
    AND?: Prisma.MetricsGithubUserRepositoryWhereInput | Prisma.MetricsGithubUserRepositoryWhereInput[];
    OR?: Prisma.MetricsGithubUserRepositoryWhereInput[];
    NOT?: Prisma.MetricsGithubUserRepositoryWhereInput | Prisma.MetricsGithubUserRepositoryWhereInput[];
    userId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
    repositoryId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
    role?: Prisma.StringFilter<'MetricsGithubUserRepository'> | string;
    createdBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubRepository?: Prisma.XOR<
      Prisma.MetricsGithubRepositoryScalarRelationFilter,
      Prisma.MetricsGithubRepositoryWhereInput
    >;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubUser?: Prisma.XOR<Prisma.MetricsGithubUserScalarRelationFilter, Prisma.MetricsGithubUserWhereInput>;
  },
  'id' | 'tenantId_userId_repositoryId'
>;

export type MetricsGithubUserRepositoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubUserRepositoryCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubUserRepositoryMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubUserRepositoryMinOrderByAggregateInput;
};

export type MetricsGithubUserRepositoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  userId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  repositoryId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  role?: Prisma.StringWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubUserRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubUserRepository'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubUserRepository'> | string;
};

export type MetricsGithubUserRepositoryCreateInput = {
  id?: string;
  role: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
};

export type MetricsGithubUserRepositoryUncheckedCreateInput = {
  id?: string;
  userId: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
};

export type MetricsGithubUserRepositoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryCreateManyInput = {
  id?: string;
  userId: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryListRelationFilter = {
  every?: Prisma.MetricsGithubUserRepositoryWhereInput;
  some?: Prisma.MetricsGithubUserRepositoryWhereInput;
  none?: Prisma.MetricsGithubUserRepositoryWhereInput;
};

export type MetricsGithubUserRepositoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubUserRepositoryTenantIdUserIdRepositoryIdCompoundUniqueInput = {
  tenantId: string;
  userId: string;
  repositoryId: string;
};

export type MetricsGithubUserRepositoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserRepositoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserRepositoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
};

export type MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
};

export type MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
};

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
};

export type MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInputEnvelope;
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
};

export type MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInputEnvelope;
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
};

export type MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput[];
  upsert?:
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInputEnvelope;
  set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubUserInput[];
  updateMany?:
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubUserInput[];
  deleteMany?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
};

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput[];
  upsert?:
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInputEnvelope;
  set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
    | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubUserInput[];
  updateMany?:
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubUserInput[];
  deleteMany?:
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput
    | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
};

export type MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  };

export type MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  };

export type MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  };

export type MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
  };

export type MetricsGithubUserRepositoryUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  };

export type MetricsGithubUserRepositoryUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  };

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  };

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput
      | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput | Prisma.MetricsGithubUserRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput
      | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  };

export type MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  role: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
};

export type MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  userId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInputEnvelope = {
  data:
    | Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInput
    | Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubUserRepositoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubUserRepositoryScalarWhereInput = {
  AND?: Prisma.MetricsGithubUserRepositoryScalarWhereInput | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  OR?: Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  NOT?: Prisma.MetricsGithubUserRepositoryScalarWhereInput | Prisma.MetricsGithubUserRepositoryScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  userId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  role?: Prisma.StringFilter<'MetricsGithubUserRepository'> | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubUserRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubUserRepository'> | string;
};

export type MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput = {
  id?: string;
  role: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserInput;
};

export type MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput = {
  id?: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubUserRepositoryCreateManyMetricsGithubUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInput
    | Prisma.MetricsGithubUserRepositoryCreateManyMetricsGithubUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubUserRepositoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    id?: string;
    role: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserInput;
    MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
  };

export type MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    id?: string;
    userId: string;
    repositoryId: string;
    role: string;
    updatedBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    id?: string;
    role: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserInput;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
    MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubUserRepositoryInput;
  };

export type MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    id?: string;
    userId: string;
    repositoryId: string;
    role: string;
    createdBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubUserRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubUserRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubUserRepositoryCreateManyMetricsGithubRepositoryInput = {
  id?: string;
  userId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
};

export type MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryCreateManyMetricsGithubUserInput = {
  id?: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryUpdateWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput = {
  id?: string;
  userId: string;
  repositoryId: string;
  role: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryCreateManyMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput = {
  id?: string;
  userId: string;
  repositoryId: string;
  role: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUserNestedInput;
    MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
  };

export type MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubUserRepositoryUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUserNestedInput;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
    MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput;
  };

export type MetricsGithubUserRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubUserRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.StringFieldUpdateOperationsInput | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubUserRepositorySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    repositoryId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUserRepository']
>;

export type MetricsGithubUserRepositorySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    repositoryId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUserRepository']
>;

export type MetricsGithubUserRepositorySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    userId?: boolean;
    repositoryId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubUserRepository']
>;

export type MetricsGithubUserRepositorySelectScalar = {
  id?: boolean;
  userId?: boolean;
  repositoryId?: boolean;
  role?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubUserRepositoryOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'userId' | 'repositoryId' | 'role' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubUserRepository']
>;
export type MetricsGithubUserRepositoryInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubUserRepositoryIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubUserRepositoryIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubUserRepositoryPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubUserRepository';
  objects: {
    MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubRepository: Prisma.$MetricsGithubRepositoryPayload<ExtArgs>;
    MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubUser: Prisma.$MetricsGithubUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      userId: string;
      repositoryId: string;
      role: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubUserRepository']
  >;
  composites: {};
};

export type MetricsGithubUserRepositoryGetPayload<
  S extends boolean | null | undefined | MetricsGithubUserRepositoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserRepositoryPayload, S>;

export type MetricsGithubUserRepositoryCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubUserRepositoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubUserRepositoryCountAggregateInputType | true;
};

export interface MetricsGithubUserRepositoryDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubUserRepository'];
    meta: { name: 'MetricsGithubUserRepository' };
  };
  /**
   * Find zero or one MetricsGithubUserRepository that matches the filter.
   * @param {MetricsGithubUserRepositoryFindUniqueArgs} args - Arguments to find a MetricsGithubUserRepository
   * @example
   * // Get one MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubUserRepositoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubUserRepository that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubUserRepositoryFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubUserRepository
   * @example
   * // Get one MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubUserRepositoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubUserRepository that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryFindFirstArgs} args - Arguments to find a MetricsGithubUserRepository
   * @example
   * // Get one MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubUserRepositoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubUserRepository that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubUserRepository
   * @example
   * // Get one MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubUserRepositoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubUserRepositories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubUserRepositories
   * const metricsGithubUserRepositories = await prisma.metricsGithubUserRepository.findMany()
   *
   * // Get first 10 MetricsGithubUserRepositories
   * const metricsGithubUserRepositories = await prisma.metricsGithubUserRepository.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubUserRepositoryWithIdOnly = await prisma.metricsGithubUserRepository.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubUserRepositoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a MetricsGithubUserRepository.
   * @param {MetricsGithubUserRepositoryCreateArgs} args - Arguments to create a MetricsGithubUserRepository.
   * @example
   * // Create one MetricsGithubUserRepository
   * const MetricsGithubUserRepository = await prisma.metricsGithubUserRepository.create({
   *   data: {
   *     // ... data to create a MetricsGithubUserRepository
   *   }
   * })
   *
   */
  create<T extends MetricsGithubUserRepositoryCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubUserRepositories.
   * @param {MetricsGithubUserRepositoryCreateManyArgs} args - Arguments to create many MetricsGithubUserRepositories.
   * @example
   * // Create many MetricsGithubUserRepositories
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubUserRepositoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubUserRepositories and returns the data saved in the database.
   * @param {MetricsGithubUserRepositoryCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubUserRepositories.
   * @example
   * // Create many MetricsGithubUserRepositories
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubUserRepositories and only return the `id`
   * const metricsGithubUserRepositoryWithIdOnly = await prisma.metricsGithubUserRepository.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubUserRepositoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubUserRepository.
   * @param {MetricsGithubUserRepositoryDeleteArgs} args - Arguments to delete one MetricsGithubUserRepository.
   * @example
   * // Delete one MetricsGithubUserRepository
   * const MetricsGithubUserRepository = await prisma.metricsGithubUserRepository.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubUserRepository
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubUserRepositoryDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubUserRepository.
   * @param {MetricsGithubUserRepositoryUpdateArgs} args - Arguments to update one MetricsGithubUserRepository.
   * @example
   * // Update one MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubUserRepositoryUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubUserRepositories.
   * @param {MetricsGithubUserRepositoryDeleteManyArgs} args - Arguments to filter MetricsGithubUserRepositories to delete.
   * @example
   * // Delete a few MetricsGithubUserRepositories
   * const { count } = await prisma.metricsGithubUserRepository.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubUserRepositoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubUserRepositoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubUserRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubUserRepositories
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubUserRepositoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubUserRepositories and returns the data updated in the database.
   * @param {MetricsGithubUserRepositoryUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubUserRepositories.
   * @example
   * // Update many MetricsGithubUserRepositories
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubUserRepositories and only return the `id`
   * const metricsGithubUserRepositoryWithIdOnly = await prisma.metricsGithubUserRepository.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubUserRepositoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubUserRepository.
   * @param {MetricsGithubUserRepositoryUpsertArgs} args - Arguments to update or create a MetricsGithubUserRepository.
   * @example
   * // Update or create a MetricsGithubUserRepository
   * const metricsGithubUserRepository = await prisma.metricsGithubUserRepository.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubUserRepository
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubUserRepository we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubUserRepositoryUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubUserRepositoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubUserRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryCountArgs} args - Arguments to filter MetricsGithubUserRepositories to count.
   * @example
   * // Count the number of MetricsGithubUserRepositories
   * const count = await prisma.metricsGithubUserRepository.count({
   *   where: {
   *     // ... the filter for the MetricsGithubUserRepositories we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubUserRepositoryCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubUserRepositoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubUserRepositoryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubUserRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubUserRepositoryAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubUserRepositoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubUserRepositoryAggregateType<T>>;

  /**
   * Group by MetricsGithubUserRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubUserRepositoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubUserRepositoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubUserRepositoryGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubUserRepositoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubUserRepositoryGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubUserRepositoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubUserRepository model
   */
  readonly fields: MetricsGithubUserRepositoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubUserRepository.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubUserRepositoryClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubRepository<T extends Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubUser<T extends Prisma.MetricsGithubUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubUserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubUserRepository model
 */
export interface MetricsGithubUserRepositoryFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly userId: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly repositoryId: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly role: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubUserRepository', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubUserRepository', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubUserRepository', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubUserRepository findUnique
 */
export type MetricsGithubUserRepositoryFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUserRepository to fetch.
   */
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubUserRepository findUniqueOrThrow
 */
export type MetricsGithubUserRepositoryFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUserRepository to fetch.
   */
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubUserRepository findFirst
 */
export type MetricsGithubUserRepositoryFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUserRepository to fetch.
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUserRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubUserRepositories.
   */
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUserRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUserRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubUserRepositories.
   */
  distinct?: Prisma.MetricsGithubUserRepositoryScalarFieldEnum | Prisma.MetricsGithubUserRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubUserRepository findFirstOrThrow
 */
export type MetricsGithubUserRepositoryFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUserRepository to fetch.
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUserRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubUserRepositories.
   */
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUserRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUserRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubUserRepositories.
   */
  distinct?: Prisma.MetricsGithubUserRepositoryScalarFieldEnum | Prisma.MetricsGithubUserRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubUserRepository findMany
 */
export type MetricsGithubUserRepositoryFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubUserRepositories to fetch.
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubUserRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubUserRepositories.
   */
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubUserRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubUserRepositories.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubUserRepositoryScalarFieldEnum | Prisma.MetricsGithubUserRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubUserRepository create
 */
export type MetricsGithubUserRepositoryCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubUserRepository.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateInput
  >;
};

/**
 * MetricsGithubUserRepository createMany
 */
export type MetricsGithubUserRepositoryCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubUserRepositories.
   */
  data: Prisma.MetricsGithubUserRepositoryCreateManyInput | Prisma.MetricsGithubUserRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubUserRepository createManyAndReturn
 */
export type MetricsGithubUserRepositoryCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubUserRepositories.
   */
  data: Prisma.MetricsGithubUserRepositoryCreateManyInput | Prisma.MetricsGithubUserRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubUserRepository update
 */
export type MetricsGithubUserRepositoryUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubUserRepository.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateInput
  >;
  /**
   * Choose, which MetricsGithubUserRepository to update.
   */
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubUserRepository updateMany
 */
export type MetricsGithubUserRepositoryUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubUserRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubUserRepositories to update
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubUserRepositories to update.
   */
  limit?: number;
};

/**
 * MetricsGithubUserRepository updateManyAndReturn
 */
export type MetricsGithubUserRepositoryUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubUserRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubUserRepositories to update
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubUserRepositories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubUserRepository upsert
 */
export type MetricsGithubUserRepositoryUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubUserRepository to update in case it exists.
   */
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  /**
   * In case the MetricsGithubUserRepository found by the `where` argument doesn't exist, create a new MetricsGithubUserRepository with this data.
   */
  create: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryCreateInput,
    Prisma.MetricsGithubUserRepositoryUncheckedCreateInput
  >;
  /**
   * In case the MetricsGithubUserRepository was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MetricsGithubUserRepositoryUpdateInput,
    Prisma.MetricsGithubUserRepositoryUncheckedUpdateInput
  >;
};

/**
 * MetricsGithubUserRepository delete
 */
export type MetricsGithubUserRepositoryDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubUserRepository to delete.
   */
  where: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubUserRepository deleteMany
 */
export type MetricsGithubUserRepositoryDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubUserRepositories to delete
   */
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubUserRepositories to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubUserRepository without action
 */
export type MetricsGithubUserRepositoryDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
};
