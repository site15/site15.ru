/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubMetric` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubMetric
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubMetricModel = runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubMetricPayload>;

export type AggregateMetricsGithubMetric = {
  _count: MetricsGithubMetricCountAggregateOutputType | null;
  _avg: MetricsGithubMetricAvgAggregateOutputType | null;
  _sum: MetricsGithubMetricSumAggregateOutputType | null;
  _min: MetricsGithubMetricMinAggregateOutputType | null;
  _max: MetricsGithubMetricMaxAggregateOutputType | null;
};

export type MetricsGithubMetricAvgAggregateOutputType = {
  metricValue: number | null;
};

export type MetricsGithubMetricSumAggregateOutputType = {
  metricValue: number | null;
};

export type MetricsGithubMetricMinAggregateOutputType = {
  id: string | null;
  repositoryId: string | null;
  metricName: string | null;
  metricValue: number | null;
  recordedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubMetricMaxAggregateOutputType = {
  id: string | null;
  repositoryId: string | null;
  metricName: string | null;
  metricValue: number | null;
  recordedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubMetricCountAggregateOutputType = {
  id: number;
  repositoryId: number;
  metricName: number;
  metricValue: number;
  recordedAt: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubMetricAvgAggregateInputType = {
  metricValue?: true;
};

export type MetricsGithubMetricSumAggregateInputType = {
  metricValue?: true;
};

export type MetricsGithubMetricMinAggregateInputType = {
  id?: true;
  repositoryId?: true;
  metricName?: true;
  metricValue?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubMetricMaxAggregateInputType = {
  id?: true;
  repositoryId?: true;
  metricName?: true;
  metricValue?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubMetricCountAggregateInputType = {
  id?: true;
  repositoryId?: true;
  metricName?: true;
  metricValue?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubMetricAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubMetric to aggregate.
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubMetrics to fetch.
   */
  orderBy?: Prisma.MetricsGithubMetricOrderByWithRelationInput | Prisma.MetricsGithubMetricOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubMetricWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubMetrics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubMetrics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubMetrics
   **/
  _count?: true | MetricsGithubMetricCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: MetricsGithubMetricAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: MetricsGithubMetricSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubMetricMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubMetricMaxAggregateInputType;
};

export type GetMetricsGithubMetricAggregateType<T extends MetricsGithubMetricAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubMetric]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubMetric[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubMetric[P]>;
};

export type MetricsGithubMetricGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubMetricWhereInput;
  orderBy?:
    | Prisma.MetricsGithubMetricOrderByWithAggregationInput
    | Prisma.MetricsGithubMetricOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubMetricScalarFieldEnum[] | Prisma.MetricsGithubMetricScalarFieldEnum;
  having?: Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubMetricCountAggregateInputType | true;
  _avg?: MetricsGithubMetricAvgAggregateInputType;
  _sum?: MetricsGithubMetricSumAggregateInputType;
  _min?: MetricsGithubMetricMinAggregateInputType;
  _max?: MetricsGithubMetricMaxAggregateInputType;
};

export type MetricsGithubMetricGroupByOutputType = {
  id: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubMetricCountAggregateOutputType | null;
  _avg: MetricsGithubMetricAvgAggregateOutputType | null;
  _sum: MetricsGithubMetricSumAggregateOutputType | null;
  _min: MetricsGithubMetricMinAggregateOutputType | null;
  _max: MetricsGithubMetricMaxAggregateOutputType | null;
};

type GetMetricsGithubMetricGroupByPayload<T extends MetricsGithubMetricGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsGithubMetricGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsGithubMetricGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsGithubMetricGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsGithubMetricGroupByOutputType[P]>;
    }
  >
>;

export type MetricsGithubMetricWhereInput = {
  AND?: Prisma.MetricsGithubMetricWhereInput | Prisma.MetricsGithubMetricWhereInput[];
  OR?: Prisma.MetricsGithubMetricWhereInput[];
  NOT?: Prisma.MetricsGithubMetricWhereInput | Prisma.MetricsGithubMetricWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  metricName?: Prisma.StringFilter<'MetricsGithubMetric'> | string;
  metricValue?: Prisma.FloatFilter<'MetricsGithubMetric'> | number;
  recordedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubRepository?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryScalarRelationFilter,
    Prisma.MetricsGithubRepositoryWhereInput
  >;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
};

export type MetricsGithubMetricOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  metricName?: Prisma.SortOrder;
  metricValue?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryOrderByWithRelationInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
};

export type MetricsGithubMetricWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_repositoryId_metricName_recordedAt?: Prisma.MetricsGithubMetricTenantIdRepositoryIdMetricNameRecordedAtCompoundUniqueInput;
    AND?: Prisma.MetricsGithubMetricWhereInput | Prisma.MetricsGithubMetricWhereInput[];
    OR?: Prisma.MetricsGithubMetricWhereInput[];
    NOT?: Prisma.MetricsGithubMetricWhereInput | Prisma.MetricsGithubMetricWhereInput[];
    repositoryId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
    metricName?: Prisma.StringFilter<'MetricsGithubMetric'> | string;
    metricValue?: Prisma.FloatFilter<'MetricsGithubMetric'> | number;
    recordedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
    createdBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
    MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubRepository?: Prisma.XOR<
      Prisma.MetricsGithubRepositoryScalarRelationFilter,
      Prisma.MetricsGithubRepositoryWhereInput
    >;
    MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
  },
  'id' | 'tenantId_repositoryId_metricName_recordedAt'
>;

export type MetricsGithubMetricOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  metricName?: Prisma.SortOrder;
  metricValue?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubMetricCountOrderByAggregateInput;
  _avg?: Prisma.MetricsGithubMetricAvgOrderByAggregateInput;
  _max?: Prisma.MetricsGithubMetricMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubMetricMinOrderByAggregateInput;
  _sum?: Prisma.MetricsGithubMetricSumOrderByAggregateInput;
};

export type MetricsGithubMetricScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubMetricScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubMetric'> | string;
  repositoryId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubMetric'> | string;
  metricName?: Prisma.StringWithAggregatesFilter<'MetricsGithubMetric'> | string;
  metricValue?: Prisma.FloatWithAggregatesFilter<'MetricsGithubMetric'> | number;
  recordedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubMetric'> | Date | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubMetric'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubMetric'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubMetric'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubMetric'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubMetric'> | string;
};

export type MetricsGithubMetricCreateInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubMetricInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserInput;
};

export type MetricsGithubMetricUncheckedCreateInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubMetricNestedInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubMetricUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricCreateManyInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricTenantIdRepositoryIdMetricNameRecordedAtCompoundUniqueInput = {
  tenantId: string;
  repositoryId: string;
  metricName: string;
  recordedAt: Date | string;
};

export type MetricsGithubMetricCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  metricName?: Prisma.SortOrder;
  metricValue?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubMetricAvgOrderByAggregateInput = {
  metricValue?: Prisma.SortOrder;
};

export type MetricsGithubMetricMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  metricName?: Prisma.SortOrder;
  metricValue?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubMetricMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  metricName?: Prisma.SortOrder;
  metricValue?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubMetricSumOrderByAggregateInput = {
  metricValue?: Prisma.SortOrder;
};

export type MetricsGithubMetricListRelationFilter = {
  every?: Prisma.MetricsGithubMetricWhereInput;
  some?: Prisma.MetricsGithubMetricWhereInput;
  none?: Prisma.MetricsGithubMetricWhereInput;
};

export type MetricsGithubMetricOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type FloatFieldUpdateOperationsInput = {
  set?: number;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type MetricsGithubMetricCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
};

export type MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
};

export type MetricsGithubMetricUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
};

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
};

export type MetricsGithubMetricCreateNestedManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
};

export type MetricsGithubMetricCreateNestedManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
};

export type MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
          Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  };

export type MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
          Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  };

export type MetricsGithubMetricUpdateManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
};

export type MetricsGithubMetricUpdateManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
        Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
};

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
          Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
  };

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
          Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      | Prisma.MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    delete?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    connect?: Prisma.MetricsGithubMetricWhereUniqueInput | Prisma.MetricsGithubMetricWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
      | Prisma.MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
  };

export type MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserInput;
};

export type MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricCreateOrConnectWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubMetricCreateManyMetricsGithubRepositoryInputEnvelope = {
  data:
    | Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInput
    | Prisma.MetricsGithubMetricCreateManyMetricsGithubRepositoryInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubMetricCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubMetricUpdateManyWithWhereWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubMetricScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateManyMutationInput,
    Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubMetricScalarWhereInput = {
  AND?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
  OR?: Prisma.MetricsGithubMetricScalarWhereInput[];
  NOT?: Prisma.MetricsGithubMetricScalarWhereInput | Prisma.MetricsGithubMetricScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  metricName?: Prisma.StringFilter<'MetricsGithubMetric'> | string;
  metricValue?: Prisma.FloatFilter<'MetricsGithubMetric'> | number;
  recordedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubMetric'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubMetric'> | string;
};

export type MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubMetricInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserInput;
};

export type MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
    Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
  >;
};

export type MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubMetricInput;
};

export type MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricCreateOrConnectWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
    Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    | Prisma.MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubMetricWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubMetricWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubMetricScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateManyMutationInput,
    Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput
  >;
};

export type MetricsGithubMetricUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubMetricWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubMetricCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedCreateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubMetricUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubMetricWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput,
      Prisma.MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubMetricUpdateManyWithWhereWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubMetricScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateManyMutationInput,
    Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubMetricCreateManyMetricsGithubRepositoryInput = {
  id?: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubMetricUncheckedUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricCreateManyMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: string;
  repositoryId: string;
  metricName: string;
  metricValue: number;
  recordedAt: Date | string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubMetricNestedInput;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubMetricNestedInput;
};

export type MetricsGithubMetricUncheckedUpdateWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricUncheckedUpdateManyWithoutMetricsUser_MetricsGithubMetric_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  metricName?: Prisma.StringFieldUpdateOperationsInput | string;
  metricValue?: Prisma.FloatFieldUpdateOperationsInput | number;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubMetricSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    metricName?: boolean;
    metricValue?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubMetric']
>;

export type MetricsGithubMetricSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    metricName?: boolean;
    metricValue?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubMetric']
>;

export type MetricsGithubMetricSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    metricName?: boolean;
    metricValue?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubMetric']
>;

export type MetricsGithubMetricSelectScalar = {
  id?: boolean;
  repositoryId?: boolean;
  metricName?: boolean;
  metricValue?: boolean;
  recordedAt?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubMetricOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'repositoryId'
  | 'metricName'
  | 'metricValue'
  | 'recordedAt'
  | 'createdBy'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'
  | 'tenantId',
  ExtArgs['result']['metricsGithubMetric']
>;
export type MetricsGithubMetricInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubMetricIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubMetricIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubMetricPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubMetric';
  objects: {
    MetricsUser_MetricsGithubMetric_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubRepository: Prisma.$MetricsGithubRepositoryPayload<ExtArgs>;
    MetricsUser_MetricsGithubMetric_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      repositoryId: string;
      metricName: string;
      metricValue: number;
      recordedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubMetric']
  >;
  composites: {};
};

export type MetricsGithubMetricGetPayload<S extends boolean | null | undefined | MetricsGithubMetricDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload, S>;

export type MetricsGithubMetricCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubMetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubMetricCountAggregateInputType | true;
};

export interface MetricsGithubMetricDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubMetric'];
    meta: { name: 'MetricsGithubMetric' };
  };
  /**
   * Find zero or one MetricsGithubMetric that matches the filter.
   * @param {MetricsGithubMetricFindUniqueArgs} args - Arguments to find a MetricsGithubMetric
   * @example
   * // Get one MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubMetricFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubMetric that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubMetricFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubMetric
   * @example
   * // Get one MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubMetricFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubMetric that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricFindFirstArgs} args - Arguments to find a MetricsGithubMetric
   * @example
   * // Get one MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubMetricFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubMetric that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubMetric
   * @example
   * // Get one MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubMetricFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubMetrics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubMetrics
   * const metricsGithubMetrics = await prisma.metricsGithubMetric.findMany()
   *
   * // Get first 10 MetricsGithubMetrics
   * const metricsGithubMetrics = await prisma.metricsGithubMetric.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubMetricWithIdOnly = await prisma.metricsGithubMetric.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubMetricFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsGithubMetric.
   * @param {MetricsGithubMetricCreateArgs} args - Arguments to create a MetricsGithubMetric.
   * @example
   * // Create one MetricsGithubMetric
   * const MetricsGithubMetric = await prisma.metricsGithubMetric.create({
   *   data: {
   *     // ... data to create a MetricsGithubMetric
   *   }
   * })
   *
   */
  create<T extends MetricsGithubMetricCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubMetrics.
   * @param {MetricsGithubMetricCreateManyArgs} args - Arguments to create many MetricsGithubMetrics.
   * @example
   * // Create many MetricsGithubMetrics
   * const metricsGithubMetric = await prisma.metricsGithubMetric.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubMetricCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubMetrics and returns the data saved in the database.
   * @param {MetricsGithubMetricCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubMetrics.
   * @example
   * // Create many MetricsGithubMetrics
   * const metricsGithubMetric = await prisma.metricsGithubMetric.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubMetrics and only return the `id`
   * const metricsGithubMetricWithIdOnly = await prisma.metricsGithubMetric.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubMetricCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubMetric.
   * @param {MetricsGithubMetricDeleteArgs} args - Arguments to delete one MetricsGithubMetric.
   * @example
   * // Delete one MetricsGithubMetric
   * const MetricsGithubMetric = await prisma.metricsGithubMetric.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubMetric
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubMetricDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubMetric.
   * @param {MetricsGithubMetricUpdateArgs} args - Arguments to update one MetricsGithubMetric.
   * @example
   * // Update one MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubMetricUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubMetrics.
   * @param {MetricsGithubMetricDeleteManyArgs} args - Arguments to filter MetricsGithubMetrics to delete.
   * @example
   * // Delete a few MetricsGithubMetrics
   * const { count } = await prisma.metricsGithubMetric.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubMetricDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubMetricDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubMetrics
   * const metricsGithubMetric = await prisma.metricsGithubMetric.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubMetricUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubMetrics and returns the data updated in the database.
   * @param {MetricsGithubMetricUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubMetrics.
   * @example
   * // Update many MetricsGithubMetrics
   * const metricsGithubMetric = await prisma.metricsGithubMetric.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubMetrics and only return the `id`
   * const metricsGithubMetricWithIdOnly = await prisma.metricsGithubMetric.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubMetricUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubMetricPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubMetric.
   * @param {MetricsGithubMetricUpsertArgs} args - Arguments to update or create a MetricsGithubMetric.
   * @example
   * // Update or create a MetricsGithubMetric
   * const metricsGithubMetric = await prisma.metricsGithubMetric.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubMetric
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubMetric we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubMetricUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubMetricUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubMetricClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubMetrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricCountArgs} args - Arguments to filter MetricsGithubMetrics to count.
   * @example
   * // Count the number of MetricsGithubMetrics
   * const count = await prisma.metricsGithubMetric.count({
   *   where: {
   *     // ... the filter for the MetricsGithubMetrics we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubMetricCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubMetricCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubMetricCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubMetric.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubMetricAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubMetricAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubMetricAggregateType<T>>;

  /**
   * Group by MetricsGithubMetric.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubMetricGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubMetricGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubMetricGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubMetricGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubMetricGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubMetric model
   */
  readonly fields: MetricsGithubMetricFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubMetric.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubMetricClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubRepository<T extends Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubMetric model
 */
export interface MetricsGithubMetricFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
  readonly repositoryId: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
  readonly metricName: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
  readonly metricValue: Prisma.FieldRef<'MetricsGithubMetric', 'Float'>;
  readonly recordedAt: Prisma.FieldRef<'MetricsGithubMetric', 'DateTime'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubMetric', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubMetric', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubMetric', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubMetric findUnique
 */
export type MetricsGithubMetricFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubMetric to fetch.
   */
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
};

/**
 * MetricsGithubMetric findUniqueOrThrow
 */
export type MetricsGithubMetricFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubMetric to fetch.
   */
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
};

/**
 * MetricsGithubMetric findFirst
 */
export type MetricsGithubMetricFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubMetric to fetch.
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubMetrics to fetch.
   */
  orderBy?: Prisma.MetricsGithubMetricOrderByWithRelationInput | Prisma.MetricsGithubMetricOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubMetrics.
   */
  cursor?: Prisma.MetricsGithubMetricWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubMetrics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubMetrics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubMetrics.
   */
  distinct?: Prisma.MetricsGithubMetricScalarFieldEnum | Prisma.MetricsGithubMetricScalarFieldEnum[];
};

/**
 * MetricsGithubMetric findFirstOrThrow
 */
export type MetricsGithubMetricFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubMetric to fetch.
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubMetrics to fetch.
   */
  orderBy?: Prisma.MetricsGithubMetricOrderByWithRelationInput | Prisma.MetricsGithubMetricOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubMetrics.
   */
  cursor?: Prisma.MetricsGithubMetricWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubMetrics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubMetrics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubMetrics.
   */
  distinct?: Prisma.MetricsGithubMetricScalarFieldEnum | Prisma.MetricsGithubMetricScalarFieldEnum[];
};

/**
 * MetricsGithubMetric findMany
 */
export type MetricsGithubMetricFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubMetrics to fetch.
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubMetrics to fetch.
   */
  orderBy?: Prisma.MetricsGithubMetricOrderByWithRelationInput | Prisma.MetricsGithubMetricOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubMetrics.
   */
  cursor?: Prisma.MetricsGithubMetricWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubMetrics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubMetrics.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubMetricScalarFieldEnum | Prisma.MetricsGithubMetricScalarFieldEnum[];
};

/**
 * MetricsGithubMetric create
 */
export type MetricsGithubMetricCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubMetric.
   */
  data: Prisma.XOR<Prisma.MetricsGithubMetricCreateInput, Prisma.MetricsGithubMetricUncheckedCreateInput>;
};

/**
 * MetricsGithubMetric createMany
 */
export type MetricsGithubMetricCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubMetrics.
   */
  data: Prisma.MetricsGithubMetricCreateManyInput | Prisma.MetricsGithubMetricCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubMetric createManyAndReturn
 */
export type MetricsGithubMetricCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubMetrics.
   */
  data: Prisma.MetricsGithubMetricCreateManyInput | Prisma.MetricsGithubMetricCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubMetric update
 */
export type MetricsGithubMetricUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubMetric.
   */
  data: Prisma.XOR<Prisma.MetricsGithubMetricUpdateInput, Prisma.MetricsGithubMetricUncheckedUpdateInput>;
  /**
   * Choose, which MetricsGithubMetric to update.
   */
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
};

/**
 * MetricsGithubMetric updateMany
 */
export type MetricsGithubMetricUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubMetrics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateManyMutationInput,
    Prisma.MetricsGithubMetricUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubMetrics to update
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * Limit how many MetricsGithubMetrics to update.
   */
  limit?: number;
};

/**
 * MetricsGithubMetric updateManyAndReturn
 */
export type MetricsGithubMetricUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubMetrics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubMetricUpdateManyMutationInput,
    Prisma.MetricsGithubMetricUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubMetrics to update
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * Limit how many MetricsGithubMetrics to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubMetric upsert
 */
export type MetricsGithubMetricUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubMetric to update in case it exists.
   */
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
  /**
   * In case the MetricsGithubMetric found by the `where` argument doesn't exist, create a new MetricsGithubMetric with this data.
   */
  create: Prisma.XOR<Prisma.MetricsGithubMetricCreateInput, Prisma.MetricsGithubMetricUncheckedCreateInput>;
  /**
   * In case the MetricsGithubMetric was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsGithubMetricUpdateInput, Prisma.MetricsGithubMetricUncheckedUpdateInput>;
};

/**
 * MetricsGithubMetric delete
 */
export type MetricsGithubMetricDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubMetric to delete.
   */
  where: Prisma.MetricsGithubMetricWhereUniqueInput;
};

/**
 * MetricsGithubMetric deleteMany
 */
export type MetricsGithubMetricDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubMetrics to delete
   */
  where?: Prisma.MetricsGithubMetricWhereInput;
  /**
   * Limit how many MetricsGithubMetrics to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubMetric without action
 */
export type MetricsGithubMetricDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
};
