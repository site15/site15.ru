/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubRepository` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubRepository
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubRepositoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubRepositoryPayload>;

export type AggregateMetricsGithubRepository = {
  _count: MetricsGithubRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubRepositoryMaxAggregateOutputType | null;
};

export type MetricsGithubRepositoryMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  owner: string | null;
  private: boolean | null;
  fork: boolean | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubRepositoryMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  owner: string | null;
  private: boolean | null;
  fork: boolean | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubRepositoryCountAggregateOutputType = {
  id: number;
  name: number;
  owner: number;
  private: number;
  fork: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubRepositoryMinAggregateInputType = {
  id?: true;
  name?: true;
  owner?: true;
  private?: true;
  fork?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubRepositoryMaxAggregateInputType = {
  id?: true;
  name?: true;
  owner?: true;
  private?: true;
  fork?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubRepositoryCountAggregateInputType = {
  id?: true;
  name?: true;
  owner?: true;
  private?: true;
  fork?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubRepositoryAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubRepository to aggregate.
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubRepositories
   **/
  _count?: true | MetricsGithubRepositoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubRepositoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubRepositoryMaxAggregateInputType;
};

export type GetMetricsGithubRepositoryAggregateType<T extends MetricsGithubRepositoryAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubRepository]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubRepository[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubRepository[P]>;
};

export type MetricsGithubRepositoryGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubRepositoryOrderByWithAggregationInput
    | Prisma.MetricsGithubRepositoryOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubRepositoryScalarFieldEnum[] | Prisma.MetricsGithubRepositoryScalarFieldEnum;
  having?: Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubRepositoryCountAggregateInputType | true;
  _min?: MetricsGithubRepositoryMinAggregateInputType;
  _max?: MetricsGithubRepositoryMaxAggregateInputType;
};

export type MetricsGithubRepositoryGroupByOutputType = {
  id: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubRepositoryMaxAggregateOutputType | null;
};

type GetMetricsGithubRepositoryGroupByPayload<T extends MetricsGithubRepositoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsGithubRepositoryGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsGithubRepositoryGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsGithubRepositoryGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsGithubRepositoryGroupByOutputType[P]>;
    }
  >
>;

export type MetricsGithubRepositoryWhereInput = {
  AND?: Prisma.MetricsGithubRepositoryWhereInput | Prisma.MetricsGithubRepositoryWhereInput[];
  OR?: Prisma.MetricsGithubRepositoryWhereInput[];
  NOT?: Prisma.MetricsGithubRepositoryWhereInput | Prisma.MetricsGithubRepositoryWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  name?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
  owner?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
  private?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
  fork?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
  createdBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricListRelationFilter;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryListRelationFilter;
};

export type MetricsGithubRepositoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  owner?: Prisma.SortOrder;
  private?: Prisma.SortOrder;
  fork?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricOrderByRelationAggregateInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryOrderByRelationAggregateInput;
};

export type MetricsGithubRepositoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_name_owner?: Prisma.MetricsGithubRepositoryTenantIdNameOwnerCompoundUniqueInput;
    AND?: Prisma.MetricsGithubRepositoryWhereInput | Prisma.MetricsGithubRepositoryWhereInput[];
    OR?: Prisma.MetricsGithubRepositoryWhereInput[];
    NOT?: Prisma.MetricsGithubRepositoryWhereInput | Prisma.MetricsGithubRepositoryWhereInput[];
    name?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
    owner?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
    private?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
    fork?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
    createdBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
    MetricsGithubMetric?: Prisma.MetricsGithubMetricListRelationFilter;
    MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryListRelationFilter;
  },
  'id' | 'tenantId_name_owner'
>;

export type MetricsGithubRepositoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  owner?: Prisma.SortOrder;
  private?: Prisma.SortOrder;
  fork?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubRepositoryCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubRepositoryMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubRepositoryMinOrderByAggregateInput;
};

export type MetricsGithubRepositoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubRepositoryScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepository'> | string;
  name?: Prisma.StringWithAggregatesFilter<'MetricsGithubRepository'> | string;
  owner?: Prisma.StringWithAggregatesFilter<'MetricsGithubRepository'> | string;
  private?: Prisma.BoolWithAggregatesFilter<'MetricsGithubRepository'> | boolean;
  fork?: Prisma.BoolWithAggregatesFilter<'MetricsGithubRepository'> | boolean;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepository'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepository'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubRepository'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepository'> | string;
};

export type MetricsGithubRepositoryCreateInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricCreateNestedManyWithoutMetricsGithubRepositoryInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryUncheckedCreateInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryCreateManyInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryScalarRelationFilter = {
  is?: Prisma.MetricsGithubRepositoryWhereInput;
  isNot?: Prisma.MetricsGithubRepositoryWhereInput;
};

export type MetricsGithubRepositoryTenantIdNameOwnerCompoundUniqueInput = {
  tenantId: string;
  name: string;
  owner: string;
};

export type MetricsGithubRepositoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  owner?: Prisma.SortOrder;
  private?: Prisma.SortOrder;
  fork?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  owner?: Prisma.SortOrder;
  private?: Prisma.SortOrder;
  fork?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  owner?: Prisma.SortOrder;
  private?: Prisma.SortOrder;
  fork?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryListRelationFilter = {
  every?: Prisma.MetricsGithubRepositoryWhereInput;
  some?: Prisma.MetricsGithubRepositoryWhereInput;
  none?: Prisma.MetricsGithubRepositoryWhereInput;
};

export type MetricsGithubRepositoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubMetricInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubMetricInput
  >;
  connectOrCreate?: Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubMetricInput;
  connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

export type MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubMetricNestedInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubMetricInput
  >;
  connectOrCreate?: Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubMetricInput;
  upsert?: Prisma.MetricsGithubRepositoryUpsertWithoutMetricsGithubMetricInput;
  connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateToOneWithWhereWithoutMetricsGithubMetricInput,
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubMetricInput
    >,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubMetricInput
  >;
};

export type BoolFieldUpdateOperationsInput = {
  set?: boolean;
};

export type MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubUserRepositoryInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubUserRepositoryInput;
  connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

export type MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubUserRepositoryNestedInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubUserRepositoryInput;
  upsert?: Prisma.MetricsGithubRepositoryUpsertWithoutMetricsGithubUserRepositoryInput;
  connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateToOneWithWhereWithoutMetricsGithubUserRepositoryInput,
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubUserRepositoryInput
    >,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
  };

export type MetricsGithubRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
  };

export type MetricsGithubRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
  };

export type MetricsGithubRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
  };

export type MetricsGithubRepositoryUpdateManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  };

export type MetricsGithubRepositoryUpdateManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  };

export type MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  };

export type MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubRepositoryWhereUniqueInput | Prisma.MetricsGithubRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  };

export type MetricsGithubRepositoryCreateWithoutMetricsGithubMetricInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubMetricInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubMetricInput = {
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubMetricInput
  >;
};

export type MetricsGithubRepositoryUpsertWithoutMetricsGithubMetricInput = {
  update: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubMetricInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubMetricInput
  >;
  where?: Prisma.MetricsGithubRepositoryWhereInput;
};

export type MetricsGithubRepositoryUpdateToOneWithWhereWithoutMetricsGithubMetricInput = {
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubMetricInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubMetricInput
  >;
};

export type MetricsGithubRepositoryUpdateWithoutMetricsGithubMetricInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubMetricInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryCreateWithoutMetricsGithubUserRepositoryInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricCreateNestedManyWithoutMetricsGithubRepositoryInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserInput;
};

export type MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubUserRepositoryInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryCreateOrConnectWithoutMetricsGithubUserRepositoryInput = {
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubRepositoryUpsertWithoutMetricsGithubUserRepositoryInput = {
  update: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryCreateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsGithubUserRepositoryInput
  >;
  where?: Prisma.MetricsGithubRepositoryWhereInput;
};

export type MetricsGithubRepositoryUpdateToOneWithWhereWithoutMetricsGithubUserRepositoryInput = {
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateWithoutMetricsGithubUserRepositoryInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubUserRepositoryInput
  >;
};

export type MetricsGithubRepositoryUpdateWithoutMetricsGithubUserRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubRepositoryUncheckedUpdateWithoutMetricsGithubUserRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricCreateNestedManyWithoutMetricsGithubRepositoryInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    id?: string;
    name: string;
    owner: string;
    private: boolean;
    fork: boolean;
    updatedBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
  };

export type MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    | Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricCreateNestedManyWithoutMetricsGithubRepositoryInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput;
};

export type MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    id?: string;
    name: string;
    owner: string;
    private: boolean;
    fork: boolean;
    createdBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput;
  };

export type MetricsGithubRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    | Prisma.MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryScalarWhereInput = {
  AND?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  OR?: Prisma.MetricsGithubRepositoryScalarWhereInput[];
  NOT?: Prisma.MetricsGithubRepositoryScalarWhereInput | Prisma.MetricsGithubRepositoryScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  name?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
  owner?: Prisma.StringFilter<'MetricsGithubRepository'> | string;
  private?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
  fork?: Prisma.BoolFilter<'MetricsGithubRepository'> | boolean;
  createdBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubRepository'> | string;
};

export type MetricsGithubRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryCreateManyMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput = {
  id?: string;
  name: string;
  owner: string;
  private: boolean;
  fork: boolean;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    owner?: Prisma.StringFieldUpdateOperationsInput | string;
    private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  };

export type MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    owner?: Prisma.StringFieldUpdateOperationsInput | string;
    private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubRepositoryUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  owner?: Prisma.StringFieldUpdateOperationsInput | string;
  private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubMetric?: Prisma.MetricsGithubMetricUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUserNestedInput;
  MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput;
};

export type MetricsGithubRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    owner?: Prisma.StringFieldUpdateOperationsInput | string;
    private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsGithubMetric?: Prisma.MetricsGithubMetricUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
    MetricsGithubUserRepository?: Prisma.MetricsGithubUserRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput;
  };

export type MetricsGithubRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    name?: Prisma.StringFieldUpdateOperationsInput | string;
    owner?: Prisma.StringFieldUpdateOperationsInput | string;
    private?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    fork?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

/**
 * Count Type MetricsGithubRepositoryCountOutputType
 */

export type MetricsGithubRepositoryCountOutputType = {
  MetricsGithubMetric: number;
  MetricsGithubUserRepository: number;
};

export type MetricsGithubRepositoryCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsGithubMetric?: boolean | MetricsGithubRepositoryCountOutputTypeCountMetricsGithubMetricArgs;
  MetricsGithubUserRepository?: boolean | MetricsGithubRepositoryCountOutputTypeCountMetricsGithubUserRepositoryArgs;
};

/**
 * MetricsGithubRepositoryCountOutputType without action
 */
export type MetricsGithubRepositoryCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryCountOutputType
   */
  select?: Prisma.MetricsGithubRepositoryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MetricsGithubRepositoryCountOutputType without action
 */
export type MetricsGithubRepositoryCountOutputTypeCountMetricsGithubMetricArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubMetricWhereInput;
};

/**
 * MetricsGithubRepositoryCountOutputType without action
 */
export type MetricsGithubRepositoryCountOutputTypeCountMetricsGithubUserRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
};

export type MetricsGithubRepositorySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    owner?: boolean;
    private?: boolean;
    fork?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsGithubMetric?: boolean | Prisma.MetricsGithubRepository$MetricsGithubMetricArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUserRepository?: boolean | Prisma.MetricsGithubRepository$MetricsGithubUserRepositoryArgs<ExtArgs>;
    _count?: boolean | Prisma.MetricsGithubRepositoryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepository']
>;

export type MetricsGithubRepositorySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    owner?: boolean;
    private?: boolean;
    fork?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepository']
>;

export type MetricsGithubRepositorySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    owner?: boolean;
    private?: boolean;
    fork?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepository']
>;

export type MetricsGithubRepositorySelectScalar = {
  id?: boolean;
  name?: boolean;
  owner?: boolean;
  private?: boolean;
  fork?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubRepositoryOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'owner' | 'private' | 'fork' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubRepository']
>;
export type MetricsGithubRepositoryInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsGithubMetric?: boolean | Prisma.MetricsGithubRepository$MetricsGithubMetricArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUserRepository?: boolean | Prisma.MetricsGithubRepository$MetricsGithubUserRepositoryArgs<ExtArgs>;
  _count?: boolean | Prisma.MetricsGithubRepositoryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MetricsGithubRepositoryIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubRepositoryIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubRepositoryPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubRepository';
  objects: {
    MetricsGithubMetric: Prisma.$MetricsGithubMetricPayload<ExtArgs>[];
    MetricsUser_MetricsGithubRepository_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsUser_MetricsGithubRepository_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubUserRepository: Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      name: string;
      owner: string;
      private: boolean;
      fork: boolean;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubRepository']
  >;
  composites: {};
};

export type MetricsGithubRepositoryGetPayload<
  S extends boolean | null | undefined | MetricsGithubRepositoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload, S>;

export type MetricsGithubRepositoryCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubRepositoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubRepositoryCountAggregateInputType | true;
};

export interface MetricsGithubRepositoryDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubRepository'];
    meta: { name: 'MetricsGithubRepository' };
  };
  /**
   * Find zero or one MetricsGithubRepository that matches the filter.
   * @param {MetricsGithubRepositoryFindUniqueArgs} args - Arguments to find a MetricsGithubRepository
   * @example
   * // Get one MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubRepositoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubRepository that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubRepositoryFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubRepository
   * @example
   * // Get one MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubRepositoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubRepository that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryFindFirstArgs} args - Arguments to find a MetricsGithubRepository
   * @example
   * // Get one MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubRepositoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubRepository that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubRepository
   * @example
   * // Get one MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubRepositoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubRepositories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubRepositories
   * const metricsGithubRepositories = await prisma.metricsGithubRepository.findMany()
   *
   * // Get first 10 MetricsGithubRepositories
   * const metricsGithubRepositories = await prisma.metricsGithubRepository.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubRepositoryWithIdOnly = await prisma.metricsGithubRepository.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubRepositoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsGithubRepository.
   * @param {MetricsGithubRepositoryCreateArgs} args - Arguments to create a MetricsGithubRepository.
   * @example
   * // Create one MetricsGithubRepository
   * const MetricsGithubRepository = await prisma.metricsGithubRepository.create({
   *   data: {
   *     // ... data to create a MetricsGithubRepository
   *   }
   * })
   *
   */
  create<T extends MetricsGithubRepositoryCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubRepositories.
   * @param {MetricsGithubRepositoryCreateManyArgs} args - Arguments to create many MetricsGithubRepositories.
   * @example
   * // Create many MetricsGithubRepositories
   * const metricsGithubRepository = await prisma.metricsGithubRepository.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubRepositoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubRepositories and returns the data saved in the database.
   * @param {MetricsGithubRepositoryCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubRepositories.
   * @example
   * // Create many MetricsGithubRepositories
   * const metricsGithubRepository = await prisma.metricsGithubRepository.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubRepositories and only return the `id`
   * const metricsGithubRepositoryWithIdOnly = await prisma.metricsGithubRepository.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubRepositoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubRepository.
   * @param {MetricsGithubRepositoryDeleteArgs} args - Arguments to delete one MetricsGithubRepository.
   * @example
   * // Delete one MetricsGithubRepository
   * const MetricsGithubRepository = await prisma.metricsGithubRepository.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubRepository
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubRepositoryDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubRepository.
   * @param {MetricsGithubRepositoryUpdateArgs} args - Arguments to update one MetricsGithubRepository.
   * @example
   * // Update one MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubRepositoryUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubRepositories.
   * @param {MetricsGithubRepositoryDeleteManyArgs} args - Arguments to filter MetricsGithubRepositories to delete.
   * @example
   * // Delete a few MetricsGithubRepositories
   * const { count } = await prisma.metricsGithubRepository.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubRepositoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubRepositories
   * const metricsGithubRepository = await prisma.metricsGithubRepository.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubRepositoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubRepositories and returns the data updated in the database.
   * @param {MetricsGithubRepositoryUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubRepositories.
   * @example
   * // Update many MetricsGithubRepositories
   * const metricsGithubRepository = await prisma.metricsGithubRepository.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubRepositories and only return the `id`
   * const metricsGithubRepositoryWithIdOnly = await prisma.metricsGithubRepository.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubRepositoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubRepository.
   * @param {MetricsGithubRepositoryUpsertArgs} args - Arguments to update or create a MetricsGithubRepository.
   * @example
   * // Update or create a MetricsGithubRepository
   * const metricsGithubRepository = await prisma.metricsGithubRepository.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubRepository
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubRepository we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubRepositoryUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryCountArgs} args - Arguments to filter MetricsGithubRepositories to count.
   * @example
   * // Count the number of MetricsGithubRepositories
   * const count = await prisma.metricsGithubRepository.count({
   *   where: {
   *     // ... the filter for the MetricsGithubRepositories we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubRepositoryCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubRepositoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubRepositoryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubRepositoryAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubRepositoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubRepositoryAggregateType<T>>;

  /**
   * Group by MetricsGithubRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubRepositoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubRepositoryGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubRepositoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubRepositoryGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubRepositoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubRepository model
   */
  readonly fields: MetricsGithubRepositoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubRepository.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubRepositoryClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsGithubMetric<T extends Prisma.MetricsGithubRepository$MetricsGithubMetricArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepository$MetricsGithubMetricArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubMetricPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions> | Null
  >;
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubUserRepository<T extends Prisma.MetricsGithubRepository$MetricsGithubUserRepositoryArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepository$MetricsGithubUserRepositoryArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubUserRepositoryPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubRepository model
 */
export interface MetricsGithubRepositoryFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
  readonly name: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
  readonly owner: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
  readonly private: Prisma.FieldRef<'MetricsGithubRepository', 'Boolean'>;
  readonly fork: Prisma.FieldRef<'MetricsGithubRepository', 'Boolean'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubRepository', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubRepository', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubRepository', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubRepository findUnique
 */
export type MetricsGithubRepositoryFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepository to fetch.
   */
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubRepository findUniqueOrThrow
 */
export type MetricsGithubRepositoryFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepository to fetch.
   */
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubRepository findFirst
 */
export type MetricsGithubRepositoryFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepository to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubRepositories.
   */
  cursor?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubRepositories.
   */
  distinct?: Prisma.MetricsGithubRepositoryScalarFieldEnum | Prisma.MetricsGithubRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubRepository findFirstOrThrow
 */
export type MetricsGithubRepositoryFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepository to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubRepositories.
   */
  cursor?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubRepositories.
   */
  distinct?: Prisma.MetricsGithubRepositoryScalarFieldEnum | Prisma.MetricsGithubRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubRepository findMany
 */
export type MetricsGithubRepositoryFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositories to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubRepositories.
   */
  cursor?: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositories.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubRepositoryScalarFieldEnum | Prisma.MetricsGithubRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubRepository create
 */
export type MetricsGithubRepositoryCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubRepository.
   */
  data: Prisma.XOR<Prisma.MetricsGithubRepositoryCreateInput, Prisma.MetricsGithubRepositoryUncheckedCreateInput>;
};

/**
 * MetricsGithubRepository createMany
 */
export type MetricsGithubRepositoryCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubRepositories.
   */
  data: Prisma.MetricsGithubRepositoryCreateManyInput | Prisma.MetricsGithubRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubRepository createManyAndReturn
 */
export type MetricsGithubRepositoryCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubRepositories.
   */
  data: Prisma.MetricsGithubRepositoryCreateManyInput | Prisma.MetricsGithubRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubRepository update
 */
export type MetricsGithubRepositoryUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubRepository.
   */
  data: Prisma.XOR<Prisma.MetricsGithubRepositoryUpdateInput, Prisma.MetricsGithubRepositoryUncheckedUpdateInput>;
  /**
   * Choose, which MetricsGithubRepository to update.
   */
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubRepository updateMany
 */
export type MetricsGithubRepositoryUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubRepositories to update
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubRepositories to update.
   */
  limit?: number;
};

/**
 * MetricsGithubRepository updateManyAndReturn
 */
export type MetricsGithubRepositoryUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubRepositories to update
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubRepositories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubRepository upsert
 */
export type MetricsGithubRepositoryUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubRepository to update in case it exists.
   */
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
  /**
   * In case the MetricsGithubRepository found by the `where` argument doesn't exist, create a new MetricsGithubRepository with this data.
   */
  create: Prisma.XOR<Prisma.MetricsGithubRepositoryCreateInput, Prisma.MetricsGithubRepositoryUncheckedCreateInput>;
  /**
   * In case the MetricsGithubRepository was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsGithubRepositoryUpdateInput, Prisma.MetricsGithubRepositoryUncheckedUpdateInput>;
};

/**
 * MetricsGithubRepository delete
 */
export type MetricsGithubRepositoryDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubRepository to delete.
   */
  where: Prisma.MetricsGithubRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubRepository deleteMany
 */
export type MetricsGithubRepositoryDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubRepositories to delete
   */
  where?: Prisma.MetricsGithubRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubRepositories to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubRepository.MetricsGithubMetric
 */
export type MetricsGithubRepository$MetricsGithubMetricArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubMetric
   */
  select?: Prisma.MetricsGithubMetricSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubMetric
   */
  omit?: Prisma.MetricsGithubMetricOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubMetricInclude<ExtArgs> | null;
  where?: Prisma.MetricsGithubMetricWhereInput;
  orderBy?: Prisma.MetricsGithubMetricOrderByWithRelationInput | Prisma.MetricsGithubMetricOrderByWithRelationInput[];
  cursor?: Prisma.MetricsGithubMetricWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MetricsGithubMetricScalarFieldEnum | Prisma.MetricsGithubMetricScalarFieldEnum[];
};

/**
 * MetricsGithubRepository.MetricsGithubUserRepository
 */
export type MetricsGithubRepository$MetricsGithubUserRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubUserRepository
   */
  select?: Prisma.MetricsGithubUserRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubUserRepository
   */
  omit?: Prisma.MetricsGithubUserRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubUserRepositoryInclude<ExtArgs> | null;
  where?: Prisma.MetricsGithubUserRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubUserRepositoryOrderByWithRelationInput[];
  cursor?: Prisma.MetricsGithubUserRepositoryWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MetricsGithubUserRepositoryScalarFieldEnum | Prisma.MetricsGithubUserRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubRepository without action
 */
export type MetricsGithubRepositoryDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepository
   */
  select?: Prisma.MetricsGithubRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepository
   */
  omit?: Prisma.MetricsGithubRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryInclude<ExtArgs> | null;
};
