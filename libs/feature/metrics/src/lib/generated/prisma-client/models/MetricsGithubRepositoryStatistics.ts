/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubRepositoryStatistics` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubRepositoryStatistics
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubRepositoryStatisticsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubRepositoryStatisticsPayload>;

export type AggregateMetricsGithubRepositoryStatistics = {
  _count: MetricsGithubRepositoryStatisticsCountAggregateOutputType | null;
  _avg: MetricsGithubRepositoryStatisticsAvgAggregateOutputType | null;
  _sum: MetricsGithubRepositoryStatisticsSumAggregateOutputType | null;
  _min: MetricsGithubRepositoryStatisticsMinAggregateOutputType | null;
  _max: MetricsGithubRepositoryStatisticsMaxAggregateOutputType | null;
};

export type MetricsGithubRepositoryStatisticsAvgAggregateOutputType = {
  starsCount: number | null;
  forksCount: number | null;
  contributorsCount: number | null;
  commitsCount: number | null;
};

export type MetricsGithubRepositoryStatisticsSumAggregateOutputType = {
  starsCount: number | null;
  forksCount: number | null;
  contributorsCount: number | null;
  commitsCount: number | null;
};

export type MetricsGithubRepositoryStatisticsMinAggregateOutputType = {
  id: string | null;
  repositoryId: string | null;
  periodType: string | null;
  starsCount: number | null;
  forksCount: number | null;
  contributorsCount: number | null;
  commitsCount: number | null;
  lastCommitDate: Date | null;
  recordedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubRepositoryStatisticsMaxAggregateOutputType = {
  id: string | null;
  repositoryId: string | null;
  periodType: string | null;
  starsCount: number | null;
  forksCount: number | null;
  contributorsCount: number | null;
  commitsCount: number | null;
  lastCommitDate: Date | null;
  recordedAt: Date | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubRepositoryStatisticsCountAggregateOutputType = {
  id: number;
  repositoryId: number;
  periodType: number;
  starsCount: number;
  forksCount: number;
  contributorsCount: number;
  commitsCount: number;
  lastCommitDate: number;
  recordedAt: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubRepositoryStatisticsAvgAggregateInputType = {
  starsCount?: true;
  forksCount?: true;
  contributorsCount?: true;
  commitsCount?: true;
};

export type MetricsGithubRepositoryStatisticsSumAggregateInputType = {
  starsCount?: true;
  forksCount?: true;
  contributorsCount?: true;
  commitsCount?: true;
};

export type MetricsGithubRepositoryStatisticsMinAggregateInputType = {
  id?: true;
  repositoryId?: true;
  periodType?: true;
  starsCount?: true;
  forksCount?: true;
  contributorsCount?: true;
  commitsCount?: true;
  lastCommitDate?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubRepositoryStatisticsMaxAggregateInputType = {
  id?: true;
  repositoryId?: true;
  periodType?: true;
  starsCount?: true;
  forksCount?: true;
  contributorsCount?: true;
  commitsCount?: true;
  lastCommitDate?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubRepositoryStatisticsCountAggregateInputType = {
  id?: true;
  repositoryId?: true;
  periodType?: true;
  starsCount?: true;
  forksCount?: true;
  contributorsCount?: true;
  commitsCount?: true;
  lastCommitDate?: true;
  recordedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubRepositoryStatisticsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubRepositoryStatistics to aggregate.
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositoryStatistics to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositoryStatistics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositoryStatistics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubRepositoryStatistics
   **/
  _count?: true | MetricsGithubRepositoryStatisticsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: MetricsGithubRepositoryStatisticsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: MetricsGithubRepositoryStatisticsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubRepositoryStatisticsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubRepositoryStatisticsMaxAggregateInputType;
};

export type GetMetricsGithubRepositoryStatisticsAggregateType<
  T extends MetricsGithubRepositoryStatisticsAggregateArgs,
> = {
  [P in keyof T & keyof AggregateMetricsGithubRepositoryStatistics]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubRepositoryStatistics[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubRepositoryStatistics[P]>;
};

export type MetricsGithubRepositoryStatisticsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  orderBy?:
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithAggregationInput
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithAggregationInput[];
  by:
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum[]
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum;
  having?: Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubRepositoryStatisticsCountAggregateInputType | true;
  _avg?: MetricsGithubRepositoryStatisticsAvgAggregateInputType;
  _sum?: MetricsGithubRepositoryStatisticsSumAggregateInputType;
  _min?: MetricsGithubRepositoryStatisticsMinAggregateInputType;
  _max?: MetricsGithubRepositoryStatisticsMaxAggregateInputType;
};

export type MetricsGithubRepositoryStatisticsGroupByOutputType = {
  id: string;
  repositoryId: string;
  periodType: string;
  starsCount: number | null;
  forksCount: number | null;
  contributorsCount: number | null;
  commitsCount: number | null;
  lastCommitDate: Date | null;
  recordedAt: Date;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubRepositoryStatisticsCountAggregateOutputType | null;
  _avg: MetricsGithubRepositoryStatisticsAvgAggregateOutputType | null;
  _sum: MetricsGithubRepositoryStatisticsSumAggregateOutputType | null;
  _min: MetricsGithubRepositoryStatisticsMinAggregateOutputType | null;
  _max: MetricsGithubRepositoryStatisticsMaxAggregateOutputType | null;
};

type GetMetricsGithubRepositoryStatisticsGroupByPayload<T extends MetricsGithubRepositoryStatisticsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MetricsGithubRepositoryStatisticsGroupByOutputType, T['by']> & {
        [P in keyof T & keyof MetricsGithubRepositoryStatisticsGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetricsGithubRepositoryStatisticsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetricsGithubRepositoryStatisticsGroupByOutputType[P]>;
      }
    >
  >;

export type MetricsGithubRepositoryStatisticsWhereInput = {
  AND?: Prisma.MetricsGithubRepositoryStatisticsWhereInput | Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
  OR?: Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
  NOT?: Prisma.MetricsGithubRepositoryStatisticsWhereInput | Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  periodType?: Prisma.StringFilter<'MetricsGithubRepositoryStatistics'> | string;
  starsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  forksCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  contributorsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  commitsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  lastCommitDate?: Prisma.DateTimeNullableFilter<'MetricsGithubRepositoryStatistics'> | Date | string | null;
  recordedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubRepository?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryScalarRelationFilter,
    Prisma.MetricsGithubRepositoryWhereInput
  >;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
};

export type MetricsGithubRepositoryStatisticsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  periodType?: Prisma.SortOrder;
  starsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  forksCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  commitsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastCommitDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryOrderByWithRelationInput;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
};

export type MetricsGithubRepositoryStatisticsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_repositoryId_periodType_recordedAt?: Prisma.MetricsGithubRepositoryStatisticsTenantIdRepositoryIdPeriodTypeRecordedAtCompoundUniqueInput;
    AND?: Prisma.MetricsGithubRepositoryStatisticsWhereInput | Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
    OR?: Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
    NOT?: Prisma.MetricsGithubRepositoryStatisticsWhereInput | Prisma.MetricsGithubRepositoryStatisticsWhereInput[];
    repositoryId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
    periodType?: Prisma.StringFilter<'MetricsGithubRepositoryStatistics'> | string;
    starsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
    forksCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
    contributorsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
    commitsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
    lastCommitDate?: Prisma.DateTimeNullableFilter<'MetricsGithubRepositoryStatistics'> | Date | string | null;
    recordedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
    createdBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubRepository?: Prisma.XOR<
      Prisma.MetricsGithubRepositoryScalarRelationFilter,
      Prisma.MetricsGithubRepositoryWhereInput
    >;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
  },
  'id' | 'tenantId_repositoryId_periodType_recordedAt'
>;

export type MetricsGithubRepositoryStatisticsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  periodType?: Prisma.SortOrder;
  starsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  forksCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  commitsCount?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastCommitDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubRepositoryStatisticsCountOrderByAggregateInput;
  _avg?: Prisma.MetricsGithubRepositoryStatisticsAvgOrderByAggregateInput;
  _max?: Prisma.MetricsGithubRepositoryStatisticsMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubRepositoryStatisticsMinOrderByAggregateInput;
  _sum?: Prisma.MetricsGithubRepositoryStatisticsSumOrderByAggregateInput;
};

export type MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
  repositoryId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
  periodType?: Prisma.StringWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
  starsCount?: Prisma.IntNullableWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  forksCount?: Prisma.IntNullableWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  contributorsCount?: Prisma.IntNullableWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  commitsCount?: Prisma.IntNullableWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  lastCommitDate?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'MetricsGithubRepositoryStatistics'>
    | Date
    | string
    | null;
  recordedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubRepositoryStatistics'> | string;
};

export type MetricsGithubRepositoryStatisticsCreateInput = {
  id?: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubRepositoryStatisticsInput;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput;
};

export type MetricsGithubRepositoryStatisticsUncheckedCreateInput = {
  id?: string;
  repositoryId: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryStatisticsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubRepositoryStatisticsNestedInput;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubRepositoryStatisticsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryStatisticsCreateManyInput = {
  id?: string;
  repositoryId: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryStatisticsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryStatisticsListRelationFilter = {
  every?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  some?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  none?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
};

export type MetricsGithubRepositoryStatisticsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsTenantIdRepositoryIdPeriodTypeRecordedAtCompoundUniqueInput = {
  tenantId: string;
  repositoryId: string;
  periodType: string;
  recordedAt: Date | string;
};

export type MetricsGithubRepositoryStatisticsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  periodType?: Prisma.SortOrder;
  starsCount?: Prisma.SortOrder;
  forksCount?: Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrder;
  commitsCount?: Prisma.SortOrder;
  lastCommitDate?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsAvgOrderByAggregateInput = {
  starsCount?: Prisma.SortOrder;
  forksCount?: Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrder;
  commitsCount?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  periodType?: Prisma.SortOrder;
  starsCount?: Prisma.SortOrder;
  forksCount?: Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrder;
  commitsCount?: Prisma.SortOrder;
  lastCommitDate?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  periodType?: Prisma.SortOrder;
  starsCount?: Prisma.SortOrder;
  forksCount?: Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrder;
  commitsCount?: Prisma.SortOrder;
  lastCommitDate?: Prisma.SortOrder;
  recordedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsSumOrderByAggregateInput = {
  starsCount?: Prisma.SortOrder;
  forksCount?: Prisma.SortOrder;
  contributorsCount?: Prisma.SortOrder;
  commitsCount?: Prisma.SortOrder;
};

export type MetricsGithubRepositoryStatisticsCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
};

export type MetricsGithubRepositoryStatisticsUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
};

export type MetricsGithubRepositoryStatisticsUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInputEnvelope;
  set?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  delete?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  connect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
};

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInputEnvelope;
  set?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  delete?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  connect?:
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
    | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
};

export type MetricsGithubRepositoryStatisticsCreateNestedManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInputEnvelope;
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  };

export type MetricsGithubRepositoryStatisticsCreateNestedManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInputEnvelope;
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  };

export type MetricsGithubRepositoryStatisticsUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInputEnvelope;
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  };

export type MetricsGithubRepositoryStatisticsUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInputEnvelope;
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
  };

export type MetricsGithubRepositoryStatisticsUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInputEnvelope;
    set?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    delete?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  };

export type MetricsGithubRepositoryStatisticsUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInputEnvelope;
    set?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    delete?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInputEnvelope;
    set?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    delete?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
          Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInputEnvelope;
    set?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    delete?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    connect?:
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput
      | Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
      | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  };

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput;
};

export type MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInputEnvelope = {
  data:
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateManyMutationInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubRepositoryStatisticsScalarWhereInput = {
  AND?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  OR?: Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  NOT?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput
    | Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  periodType?: Prisma.StringFilter<'MetricsGithubRepositoryStatistics'> | string;
  starsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  forksCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  contributorsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  commitsCount?: Prisma.IntNullableFilter<'MetricsGithubRepositoryStatistics'> | number | null;
  lastCommitDate?: Prisma.DateTimeNullableFilter<'MetricsGithubRepositoryStatistics'> | Date | string | null;
  recordedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubRepositoryStatistics'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubRepositoryStatistics'> | string;
};

export type MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubRepositoryStatisticsInput;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput;
  };

export type MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: string;
    repositoryId: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    updatedBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubRepositoryStatisticsInput;
  };

export type MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: string;
    repositoryId: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    createdBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubRepositoryStatisticsCreateOrConnectWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
      | Prisma.MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateManyMutationInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsUpdateManyWithWhereWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubRepositoryStatisticsScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubRepositoryStatisticsUpdateManyMutationInput,
      Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubRepositoryStatisticsCreateManyMetricsGithubRepositoryInput = {
  id?: string;
  periodType: string;
  starsCount?: number | null;
  forksCount?: number | null;
  contributorsCount?: number | null;
  commitsCount?: number | null;
  lastCommitDate?: Date | string | null;
  recordedAt: Date | string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubRepositoryStatisticsUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  periodType?: Prisma.StringFieldUpdateOperationsInput | string;
  starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: string;
    repositoryId: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    updatedBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubRepositoryStatisticsCreateManyMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: string;
    repositoryId: string;
    periodType: string;
    starsCount?: number | null;
    forksCount?: number | null;
    contributorsCount?: number | null;
    commitsCount?: number | null;
    lastCommitDate?: Date | string | null;
    recordedAt: Date | string;
    createdBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubRepositoryStatisticsNestedInput;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_updatedByToMetricsUserNestedInput;
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubRepositoryStatisticsUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubRepositoryStatistics_MetricsGithubRepositoryStatistics_createdByToMetricsUserNestedInput;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubRepositoryStatisticsNestedInput;
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubRepositoryStatisticsUncheckedUpdateManyWithoutMetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    periodType?: Prisma.StringFieldUpdateOperationsInput | string;
    starsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    forksCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    contributorsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    commitsCount?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
    lastCommitDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
    recordedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubRepositoryStatisticsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    periodType?: boolean;
    starsCount?: boolean;
    forksCount?: boolean;
    contributorsCount?: boolean;
    commitsCount?: boolean;
    lastCommitDate?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepositoryStatistics']
>;

export type MetricsGithubRepositoryStatisticsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    periodType?: boolean;
    starsCount?: boolean;
    forksCount?: boolean;
    contributorsCount?: boolean;
    commitsCount?: boolean;
    lastCommitDate?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepositoryStatistics']
>;

export type MetricsGithubRepositoryStatisticsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    repositoryId?: boolean;
    periodType?: boolean;
    starsCount?: boolean;
    forksCount?: boolean;
    contributorsCount?: boolean;
    commitsCount?: boolean;
    lastCommitDate?: boolean;
    recordedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
      | boolean
      | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubRepositoryStatistics']
>;

export type MetricsGithubRepositoryStatisticsSelectScalar = {
  id?: boolean;
  repositoryId?: boolean;
  periodType?: boolean;
  starsCount?: boolean;
  forksCount?: boolean;
  contributorsCount?: boolean;
  commitsCount?: boolean;
  lastCommitDate?: boolean;
  recordedAt?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubRepositoryStatisticsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'repositoryId'
  | 'periodType'
  | 'starsCount'
  | 'forksCount'
  | 'contributorsCount'
  | 'commitsCount'
  | 'lastCommitDate'
  | 'recordedAt'
  | 'createdBy'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'
  | 'tenantId',
  ExtArgs['result']['metricsGithubRepositoryStatistics']
>;
export type MetricsGithubRepositoryStatisticsInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubRepositoryStatisticsIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubRepositoryStatisticsIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser?:
    | boolean
    | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubRepositoryStatisticsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubRepositoryStatistics';
  objects: {
    MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubRepository: Prisma.$MetricsGithubRepositoryPayload<ExtArgs>;
    MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      repositoryId: string;
      periodType: string;
      starsCount: number | null;
      forksCount: number | null;
      contributorsCount: number | null;
      commitsCount: number | null;
      lastCommitDate: Date | null;
      recordedAt: Date;
      createdBy: string;
      updatedBy: string;
      createdAt: Date;
      updatedAt: Date;
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubRepositoryStatistics']
  >;
  composites: {};
};

export type MetricsGithubRepositoryStatisticsGetPayload<
  S extends boolean | null | undefined | MetricsGithubRepositoryStatisticsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MetricsGithubRepositoryStatisticsPayload, S>;

export type MetricsGithubRepositoryStatisticsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubRepositoryStatisticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubRepositoryStatisticsCountAggregateInputType | true;
};

export interface MetricsGithubRepositoryStatisticsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubRepositoryStatistics'];
    meta: { name: 'MetricsGithubRepositoryStatistics' };
  };
  /**
   * Find zero or one MetricsGithubRepositoryStatistics that matches the filter.
   * @param {MetricsGithubRepositoryStatisticsFindUniqueArgs} args - Arguments to find a MetricsGithubRepositoryStatistics
   * @example
   * // Get one MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubRepositoryStatisticsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubRepositoryStatistics that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubRepositoryStatisticsFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubRepositoryStatistics
   * @example
   * // Get one MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubRepositoryStatisticsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubRepositoryStatistics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsFindFirstArgs} args - Arguments to find a MetricsGithubRepositoryStatistics
   * @example
   * // Get one MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubRepositoryStatisticsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubRepositoryStatistics that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubRepositoryStatistics
   * @example
   * // Get one MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubRepositoryStatisticsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubRepositoryStatistics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findMany()
   *
   * // Get first 10 MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubRepositoryStatisticsWithIdOnly = await prisma.metricsGithubRepositoryStatistics.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubRepositoryStatisticsFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsCreateArgs} args - Arguments to create a MetricsGithubRepositoryStatistics.
   * @example
   * // Create one MetricsGithubRepositoryStatistics
   * const MetricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.create({
   *   data: {
   *     // ... data to create a MetricsGithubRepositoryStatistics
   *   }
   * })
   *
   */
  create<T extends MetricsGithubRepositoryStatisticsCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsCreateManyArgs} args - Arguments to create many MetricsGithubRepositoryStatistics.
   * @example
   * // Create many MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubRepositoryStatisticsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubRepositoryStatistics and returns the data saved in the database.
   * @param {MetricsGithubRepositoryStatisticsCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubRepositoryStatistics.
   * @example
   * // Create many MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubRepositoryStatistics and only return the `id`
   * const metricsGithubRepositoryStatisticsWithIdOnly = await prisma.metricsGithubRepositoryStatistics.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubRepositoryStatisticsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsDeleteArgs} args - Arguments to delete one MetricsGithubRepositoryStatistics.
   * @example
   * // Delete one MetricsGithubRepositoryStatistics
   * const MetricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubRepositoryStatistics
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubRepositoryStatisticsDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsUpdateArgs} args - Arguments to update one MetricsGithubRepositoryStatistics.
   * @example
   * // Update one MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubRepositoryStatisticsUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsDeleteManyArgs} args - Arguments to filter MetricsGithubRepositoryStatistics to delete.
   * @example
   * // Delete a few MetricsGithubRepositoryStatistics
   * const { count } = await prisma.metricsGithubRepositoryStatistics.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubRepositoryStatisticsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubRepositoryStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubRepositoryStatisticsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubRepositoryStatistics and returns the data updated in the database.
   * @param {MetricsGithubRepositoryStatisticsUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubRepositoryStatistics.
   * @example
   * // Update many MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubRepositoryStatistics and only return the `id`
   * const metricsGithubRepositoryStatisticsWithIdOnly = await prisma.metricsGithubRepositoryStatistics.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubRepositoryStatisticsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubRepositoryStatistics.
   * @param {MetricsGithubRepositoryStatisticsUpsertArgs} args - Arguments to update or create a MetricsGithubRepositoryStatistics.
   * @example
   * // Update or create a MetricsGithubRepositoryStatistics
   * const metricsGithubRepositoryStatistics = await prisma.metricsGithubRepositoryStatistics.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubRepositoryStatistics
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubRepositoryStatistics we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubRepositoryStatisticsUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubRepositoryStatisticsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryStatisticsClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubRepositoryStatisticsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubRepositoryStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsCountArgs} args - Arguments to filter MetricsGithubRepositoryStatistics to count.
   * @example
   * // Count the number of MetricsGithubRepositoryStatistics
   * const count = await prisma.metricsGithubRepositoryStatistics.count({
   *   where: {
   *     // ... the filter for the MetricsGithubRepositoryStatistics we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubRepositoryStatisticsCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubRepositoryStatisticsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubRepositoryStatisticsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubRepositoryStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubRepositoryStatisticsAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubRepositoryStatisticsAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubRepositoryStatisticsAggregateType<T>>;

  /**
   * Group by MetricsGithubRepositoryStatistics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubRepositoryStatisticsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubRepositoryStatisticsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubRepositoryStatisticsGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubRepositoryStatisticsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubRepositoryStatisticsGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubRepositoryStatisticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubRepositoryStatistics model
   */
  readonly fields: MetricsGithubRepositoryStatisticsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubRepositoryStatistics.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubRepositoryStatisticsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubRepositoryStatistics_createdByToMetricsUser<
    T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubRepository<T extends Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubRepositoryStatistics_updatedByToMetricsUser<
    T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubRepositoryStatistics model
 */
export interface MetricsGithubRepositoryStatisticsFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
  readonly repositoryId: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
  readonly periodType: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
  readonly starsCount: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'Int'>;
  readonly forksCount: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'Int'>;
  readonly contributorsCount: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'Int'>;
  readonly commitsCount: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'Int'>;
  readonly lastCommitDate: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'DateTime'>;
  readonly recordedAt: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'DateTime'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubRepositoryStatistics', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubRepositoryStatistics findUnique
 */
export type MetricsGithubRepositoryStatisticsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositoryStatistics to fetch.
   */
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
};

/**
 * MetricsGithubRepositoryStatistics findUniqueOrThrow
 */
export type MetricsGithubRepositoryStatisticsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositoryStatistics to fetch.
   */
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
};

/**
 * MetricsGithubRepositoryStatistics findFirst
 */
export type MetricsGithubRepositoryStatisticsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositoryStatistics to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositoryStatistics to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubRepositoryStatistics.
   */
  cursor?: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositoryStatistics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositoryStatistics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubRepositoryStatistics.
   */
  distinct?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum[];
};

/**
 * MetricsGithubRepositoryStatistics findFirstOrThrow
 */
export type MetricsGithubRepositoryStatisticsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositoryStatistics to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositoryStatistics to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubRepositoryStatistics.
   */
  cursor?: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositoryStatistics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositoryStatistics.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubRepositoryStatistics.
   */
  distinct?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum[];
};

/**
 * MetricsGithubRepositoryStatistics findMany
 */
export type MetricsGithubRepositoryStatisticsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubRepositoryStatistics to fetch.
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubRepositoryStatistics to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput
    | Prisma.MetricsGithubRepositoryStatisticsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubRepositoryStatistics.
   */
  cursor?: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubRepositoryStatistics from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubRepositoryStatistics.
   */
  skip?: number;
  distinct?:
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum
    | Prisma.MetricsGithubRepositoryStatisticsScalarFieldEnum[];
};

/**
 * MetricsGithubRepositoryStatistics create
 */
export type MetricsGithubRepositoryStatisticsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubRepositoryStatistics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsCreateInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateInput
  >;
};

/**
 * MetricsGithubRepositoryStatistics createMany
 */
export type MetricsGithubRepositoryStatisticsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubRepositoryStatistics.
   */
  data:
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubRepositoryStatistics createManyAndReturn
 */
export type MetricsGithubRepositoryStatisticsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubRepositoryStatistics.
   */
  data:
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyInput
    | Prisma.MetricsGithubRepositoryStatisticsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubRepositoryStatistics update
 */
export type MetricsGithubRepositoryStatisticsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubRepositoryStatistics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateInput
  >;
  /**
   * Choose, which MetricsGithubRepositoryStatistics to update.
   */
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
};

/**
 * MetricsGithubRepositoryStatistics updateMany
 */
export type MetricsGithubRepositoryStatisticsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubRepositoryStatistics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateManyMutationInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubRepositoryStatistics to update
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * Limit how many MetricsGithubRepositoryStatistics to update.
   */
  limit?: number;
};

/**
 * MetricsGithubRepositoryStatistics updateManyAndReturn
 */
export type MetricsGithubRepositoryStatisticsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubRepositoryStatistics.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateManyMutationInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubRepositoryStatistics to update
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * Limit how many MetricsGithubRepositoryStatistics to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubRepositoryStatistics upsert
 */
export type MetricsGithubRepositoryStatisticsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubRepositoryStatistics to update in case it exists.
   */
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
  /**
   * In case the MetricsGithubRepositoryStatistics found by the `where` argument doesn't exist, create a new MetricsGithubRepositoryStatistics with this data.
   */
  create: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsCreateInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedCreateInput
  >;
  /**
   * In case the MetricsGithubRepositoryStatistics was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MetricsGithubRepositoryStatisticsUpdateInput,
    Prisma.MetricsGithubRepositoryStatisticsUncheckedUpdateInput
  >;
};

/**
 * MetricsGithubRepositoryStatistics delete
 */
export type MetricsGithubRepositoryStatisticsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubRepositoryStatistics to delete.
   */
  where: Prisma.MetricsGithubRepositoryStatisticsWhereUniqueInput;
};

/**
 * MetricsGithubRepositoryStatistics deleteMany
 */
export type MetricsGithubRepositoryStatisticsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubRepositoryStatistics to delete
   */
  where?: Prisma.MetricsGithubRepositoryStatisticsWhereInput;
  /**
   * Limit how many MetricsGithubRepositoryStatistics to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubRepositoryStatistics without action
 */
export type MetricsGithubRepositoryStatisticsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubRepositoryStatistics
   */
  select?: Prisma.MetricsGithubRepositoryStatisticsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubRepositoryStatistics
   */
  omit?: Prisma.MetricsGithubRepositoryStatisticsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubRepositoryStatisticsInclude<ExtArgs> | null;
};
