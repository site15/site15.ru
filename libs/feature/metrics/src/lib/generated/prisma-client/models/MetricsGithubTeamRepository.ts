/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubTeamRepository` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubTeamRepository
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubTeamRepositoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubTeamRepositoryPayload>;

export type AggregateMetricsGithubTeamRepository = {
  _count: MetricsGithubTeamRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubTeamRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubTeamRepositoryMaxAggregateOutputType | null;
};

export type MetricsGithubTeamRepositoryMinAggregateOutputType = {
  id: string | null;
  teamId: string | null;
  repositoryId: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamRepositoryMaxAggregateOutputType = {
  id: string | null;
  teamId: string | null;
  repositoryId: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamRepositoryCountAggregateOutputType = {
  id: number;
  teamId: number;
  repositoryId: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubTeamRepositoryMinAggregateInputType = {
  id?: true;
  teamId?: true;
  repositoryId?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamRepositoryMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  repositoryId?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamRepositoryCountAggregateInputType = {
  id?: true;
  teamId?: true;
  repositoryId?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubTeamRepositoryAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeamRepository to aggregate.
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubTeamRepositories
   **/
  _count?: true | MetricsGithubTeamRepositoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubTeamRepositoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubTeamRepositoryMaxAggregateInputType;
};

export type GetMetricsGithubTeamRepositoryAggregateType<T extends MetricsGithubTeamRepositoryAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubTeamRepository]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeamRepository[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeamRepository[P]>;
};

export type MetricsGithubTeamRepositoryGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithAggregationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubTeamRepositoryScalarFieldEnum[] | Prisma.MetricsGithubTeamRepositoryScalarFieldEnum;
  having?: Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubTeamRepositoryCountAggregateInputType | true;
  _min?: MetricsGithubTeamRepositoryMinAggregateInputType;
  _max?: MetricsGithubTeamRepositoryMaxAggregateInputType;
};

export type MetricsGithubTeamRepositoryGroupByOutputType = {
  id: string;
  teamId: string;
  repositoryId: string;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubTeamRepositoryCountAggregateOutputType | null;
  _min: MetricsGithubTeamRepositoryMinAggregateOutputType | null;
  _max: MetricsGithubTeamRepositoryMaxAggregateOutputType | null;
};

type GetMetricsGithubTeamRepositoryGroupByPayload<T extends MetricsGithubTeamRepositoryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MetricsGithubTeamRepositoryGroupByOutputType, T['by']> & {
        [P in keyof T & keyof MetricsGithubTeamRepositoryGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetricsGithubTeamRepositoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetricsGithubTeamRepositoryGroupByOutputType[P]>;
      }
    >
  >;

export type MetricsGithubTeamRepositoryWhereInput = {
  AND?: Prisma.MetricsGithubTeamRepositoryWhereInput | Prisma.MetricsGithubTeamRepositoryWhereInput[];
  OR?: Prisma.MetricsGithubTeamRepositoryWhereInput[];
  NOT?: Prisma.MetricsGithubTeamRepositoryWhereInput | Prisma.MetricsGithubTeamRepositoryWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  teamId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubRepository?: Prisma.XOR<
    Prisma.MetricsGithubRepositoryScalarRelationFilter,
    Prisma.MetricsGithubRepositoryWhereInput
  >;
  MetricsGithubTeam?: Prisma.XOR<Prisma.MetricsGithubTeamScalarRelationFilter, Prisma.MetricsGithubTeamWhereInput>;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
};

export type MetricsGithubTeamRepositoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryOrderByWithRelationInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamOrderByWithRelationInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
};

export type MetricsGithubTeamRepositoryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_teamId_repositoryId?: Prisma.MetricsGithubTeamRepositoryTenantIdTeamIdRepositoryIdCompoundUniqueInput;
    AND?: Prisma.MetricsGithubTeamRepositoryWhereInput | Prisma.MetricsGithubTeamRepositoryWhereInput[];
    OR?: Prisma.MetricsGithubTeamRepositoryWhereInput[];
    NOT?: Prisma.MetricsGithubTeamRepositoryWhereInput | Prisma.MetricsGithubTeamRepositoryWhereInput[];
    teamId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
    repositoryId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
    createdBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubRepository?: Prisma.XOR<
      Prisma.MetricsGithubRepositoryScalarRelationFilter,
      Prisma.MetricsGithubRepositoryWhereInput
    >;
    MetricsGithubTeam?: Prisma.XOR<Prisma.MetricsGithubTeamScalarRelationFilter, Prisma.MetricsGithubTeamWhereInput>;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
  },
  'id' | 'tenantId_teamId_repositoryId'
>;

export type MetricsGithubTeamRepositoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubTeamRepositoryCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubTeamRepositoryMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubTeamRepositoryMinOrderByAggregateInput;
};

export type MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
  teamId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
  repositoryId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeamRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeamRepository'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamRepository'> | string;
};

export type MetricsGithubTeamRepositoryCreateInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserInput;
};

export type MetricsGithubTeamRepositoryUncheckedCreateInput = {
  id?: string;
  teamId: string;
  repositoryId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryCreateManyInput = {
  id?: string;
  teamId: string;
  repositoryId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryListRelationFilter = {
  every?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  some?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  none?: Prisma.MetricsGithubTeamRepositoryWhereInput;
};

export type MetricsGithubTeamRepositoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubTeamRepositoryTenantIdTeamIdRepositoryIdCompoundUniqueInput = {
  tenantId: string;
  teamId: string;
  repositoryId: string;
};

export type MetricsGithubTeamRepositoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamRepositoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamRepositoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  repositoryId?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
};

export type MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubRepositoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
};

export type MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
};

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput[];
  upsert?:
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInputEnvelope;
  set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput[];
  deleteMany?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
};

export type MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  };

export type MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  };

export type MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  };

export type MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  };

export type MetricsGithubTeamRepositoryUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  };

export type MetricsGithubTeamRepositoryUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    disconnect?:
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
      | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    deleteMany?:
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
      | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  };

export type MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInputEnvelope;
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
};

export type MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInputEnvelope;
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
};

export type MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput[];
  upsert?:
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInputEnvelope;
  set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubTeamInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubTeamInput[];
  deleteMany?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
};

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput[];
  upsert?:
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInputEnvelope;
  set?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  disconnect?:
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput
    | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput | Prisma.MetricsGithubTeamRepositoryWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubTeamInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubTeamInput[];
  deleteMany?:
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput
    | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
};

export type MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserInput;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserInput;
};

export type MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput = {
  id?: string;
  teamId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInput
    | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubRepositoryInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubRepositoryInput = {
  where: Prisma.MetricsGithubTeamRepositoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryInput
  >;
};

export type MetricsGithubTeamRepositoryScalarWhereInput = {
  AND?: Prisma.MetricsGithubTeamRepositoryScalarWhereInput | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  OR?: Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  NOT?: Prisma.MetricsGithubTeamRepositoryScalarWhereInput | Prisma.MetricsGithubTeamRepositoryScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  teamId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  repositoryId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamRepository'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeamRepository'> | string;
};

export type MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    id?: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
    MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserInput;
  };

export type MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    id?: string;
    teamId: string;
    repositoryId: string;
    updatedBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    id?: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserInput;
    MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
    MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
  };

export type MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    id?: string;
    teamId: string;
    repositoryId: string;
    createdBy: string;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    tenantId: string;
  };

export type MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInputEnvelope =
  {
    data:
      | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput[];
    skipDuplicates?: boolean;
  };

export type MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamRepositoryScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
      Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput = {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserInput;
  MetricsGithubRepository: Prisma.MetricsGithubRepositoryCreateNestedOneWithoutMetricsGithubTeamRepositoryInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserInput;
};

export type MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput = {
  id?: string;
  repositoryId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryCreateOrConnectWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamRepositoryUpsertWithWhereUniqueWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubTeamInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamRepositoryUpdateWithWhereUniqueWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamRepositoryUpdateManyWithWhereWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamRepositoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamRepositoryCreateManyMetricsGithubRepositoryInput = {
  id?: string;
  teamId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput = {
  id?: string;
  teamId: string;
  repositoryId: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryCreateManyMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput = {
  id?: string;
  teamId: string;
  repositoryId: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
    MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput;
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamRepositoryUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput;
    MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
    MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamRepositoryCreateManyMetricsGithubTeamInput = {
  id?: string;
  repositoryId: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamRepositoryUpdateWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_createdByToMetricsUserNestedInput;
  MetricsGithubRepository?: Prisma.MetricsGithubRepositoryUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamRepository_MetricsGithubTeamRepository_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  repositoryId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamRepositorySelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    repositoryId?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamRepository']
>;

export type MetricsGithubTeamRepositorySelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    repositoryId?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamRepository']
>;

export type MetricsGithubTeamRepositorySelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    repositoryId?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamRepository']
>;

export type MetricsGithubTeamRepositorySelectScalar = {
  id?: boolean;
  teamId?: boolean;
  repositoryId?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubTeamRepositoryOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'teamId' | 'repositoryId' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubTeamRepository']
>;
export type MetricsGithubTeamRepositoryInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamRepositoryIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamRepositoryIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubRepository?: boolean | Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubTeamRepositoryPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubTeamRepository';
  objects: {
    MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubRepository: Prisma.$MetricsGithubRepositoryPayload<ExtArgs>;
    MetricsGithubTeam: Prisma.$MetricsGithubTeamPayload<ExtArgs>;
    MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      teamId: string;
      repositoryId: string;
      createdBy: string;
      updatedBy: string;
      createdAt: Date;
      updatedAt: Date;
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubTeamRepository']
  >;
  composites: {};
};

export type MetricsGithubTeamRepositoryGetPayload<
  S extends boolean | null | undefined | MetricsGithubTeamRepositoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamRepositoryPayload, S>;

export type MetricsGithubTeamRepositoryCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubTeamRepositoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubTeamRepositoryCountAggregateInputType | true;
};

export interface MetricsGithubTeamRepositoryDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubTeamRepository'];
    meta: { name: 'MetricsGithubTeamRepository' };
  };
  /**
   * Find zero or one MetricsGithubTeamRepository that matches the filter.
   * @param {MetricsGithubTeamRepositoryFindUniqueArgs} args - Arguments to find a MetricsGithubTeamRepository
   * @example
   * // Get one MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubTeamRepositoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubTeamRepository that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubTeamRepositoryFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubTeamRepository
   * @example
   * // Get one MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubTeamRepositoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeamRepository that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryFindFirstArgs} args - Arguments to find a MetricsGithubTeamRepository
   * @example
   * // Get one MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubTeamRepositoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeamRepository that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubTeamRepository
   * @example
   * // Get one MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubTeamRepositoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubTeamRepositories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubTeamRepositories
   * const metricsGithubTeamRepositories = await prisma.metricsGithubTeamRepository.findMany()
   *
   * // Get first 10 MetricsGithubTeamRepositories
   * const metricsGithubTeamRepositories = await prisma.metricsGithubTeamRepository.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubTeamRepositoryWithIdOnly = await prisma.metricsGithubTeamRepository.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubTeamRepositoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a MetricsGithubTeamRepository.
   * @param {MetricsGithubTeamRepositoryCreateArgs} args - Arguments to create a MetricsGithubTeamRepository.
   * @example
   * // Create one MetricsGithubTeamRepository
   * const MetricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.create({
   *   data: {
   *     // ... data to create a MetricsGithubTeamRepository
   *   }
   * })
   *
   */
  create<T extends MetricsGithubTeamRepositoryCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubTeamRepositories.
   * @param {MetricsGithubTeamRepositoryCreateManyArgs} args - Arguments to create many MetricsGithubTeamRepositories.
   * @example
   * // Create many MetricsGithubTeamRepositories
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubTeamRepositoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubTeamRepositories and returns the data saved in the database.
   * @param {MetricsGithubTeamRepositoryCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubTeamRepositories.
   * @example
   * // Create many MetricsGithubTeamRepositories
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubTeamRepositories and only return the `id`
   * const metricsGithubTeamRepositoryWithIdOnly = await prisma.metricsGithubTeamRepository.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubTeamRepositoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubTeamRepository.
   * @param {MetricsGithubTeamRepositoryDeleteArgs} args - Arguments to delete one MetricsGithubTeamRepository.
   * @example
   * // Delete one MetricsGithubTeamRepository
   * const MetricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubTeamRepository
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubTeamRepositoryDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubTeamRepository.
   * @param {MetricsGithubTeamRepositoryUpdateArgs} args - Arguments to update one MetricsGithubTeamRepository.
   * @example
   * // Update one MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubTeamRepositoryUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubTeamRepositories.
   * @param {MetricsGithubTeamRepositoryDeleteManyArgs} args - Arguments to filter MetricsGithubTeamRepositories to delete.
   * @example
   * // Delete a few MetricsGithubTeamRepositories
   * const { count } = await prisma.metricsGithubTeamRepository.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubTeamRepositoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeamRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubTeamRepositories
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubTeamRepositoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeamRepositories and returns the data updated in the database.
   * @param {MetricsGithubTeamRepositoryUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubTeamRepositories.
   * @example
   * // Update many MetricsGithubTeamRepositories
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubTeamRepositories and only return the `id`
   * const metricsGithubTeamRepositoryWithIdOnly = await prisma.metricsGithubTeamRepository.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubTeamRepositoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubTeamRepository.
   * @param {MetricsGithubTeamRepositoryUpsertArgs} args - Arguments to update or create a MetricsGithubTeamRepository.
   * @example
   * // Update or create a MetricsGithubTeamRepository
   * const metricsGithubTeamRepository = await prisma.metricsGithubTeamRepository.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubTeamRepository
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubTeamRepository we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubTeamRepositoryUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamRepositoryUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamRepositoryClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubTeamRepositories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryCountArgs} args - Arguments to filter MetricsGithubTeamRepositories to count.
   * @example
   * // Count the number of MetricsGithubTeamRepositories
   * const count = await prisma.metricsGithubTeamRepository.count({
   *   where: {
   *     // ... the filter for the MetricsGithubTeamRepositories we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubTeamRepositoryCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubTeamRepositoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubTeamRepositoryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubTeamRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubTeamRepositoryAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubTeamRepositoryAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubTeamRepositoryAggregateType<T>>;

  /**
   * Group by MetricsGithubTeamRepository.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamRepositoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubTeamRepositoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubTeamRepositoryGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubTeamRepositoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubTeamRepositoryGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubTeamRepositoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubTeamRepository model
   */
  readonly fields: MetricsGithubTeamRepositoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubTeamRepository.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubTeamRepositoryClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubTeamRepository_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubRepository<T extends Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubRepositoryDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubRepositoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubRepositoryPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubTeam<T extends Prisma.MetricsGithubTeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubTeamPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubTeamRepository_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubTeamRepository model
 */
export interface MetricsGithubTeamRepositoryFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
  readonly teamId: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
  readonly repositoryId: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubTeamRepository', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubTeamRepository', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubTeamRepository', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubTeamRepository findUnique
 */
export type MetricsGithubTeamRepositoryFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamRepository to fetch.
   */
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubTeamRepository findUniqueOrThrow
 */
export type MetricsGithubTeamRepositoryFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamRepository to fetch.
   */
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubTeamRepository findFirst
 */
export type MetricsGithubTeamRepositoryFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamRepository to fetch.
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeamRepositories.
   */
  cursor?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeamRepositories.
   */
  distinct?: Prisma.MetricsGithubTeamRepositoryScalarFieldEnum | Prisma.MetricsGithubTeamRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubTeamRepository findFirstOrThrow
 */
export type MetricsGithubTeamRepositoryFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamRepository to fetch.
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeamRepositories.
   */
  cursor?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamRepositories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeamRepositories.
   */
  distinct?: Prisma.MetricsGithubTeamRepositoryScalarFieldEnum | Prisma.MetricsGithubTeamRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubTeamRepository findMany
 */
export type MetricsGithubTeamRepositoryFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamRepositories to fetch.
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamRepositories to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubTeamRepositories.
   */
  cursor?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamRepositories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamRepositories.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubTeamRepositoryScalarFieldEnum | Prisma.MetricsGithubTeamRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubTeamRepository create
 */
export type MetricsGithubTeamRepositoryCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubTeamRepository.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateInput
  >;
};

/**
 * MetricsGithubTeamRepository createMany
 */
export type MetricsGithubTeamRepositoryCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubTeamRepositories.
   */
  data: Prisma.MetricsGithubTeamRepositoryCreateManyInput | Prisma.MetricsGithubTeamRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubTeamRepository createManyAndReturn
 */
export type MetricsGithubTeamRepositoryCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubTeamRepositories.
   */
  data: Prisma.MetricsGithubTeamRepositoryCreateManyInput | Prisma.MetricsGithubTeamRepositoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeamRepository update
 */
export type MetricsGithubTeamRepositoryUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubTeamRepository.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateInput
  >;
  /**
   * Choose, which MetricsGithubTeamRepository to update.
   */
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubTeamRepository updateMany
 */
export type MetricsGithubTeamRepositoryUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubTeamRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubTeamRepositories to update
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubTeamRepositories to update.
   */
  limit?: number;
};

/**
 * MetricsGithubTeamRepository updateManyAndReturn
 */
export type MetricsGithubTeamRepositoryUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubTeamRepositories.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateManyMutationInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubTeamRepositories to update
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubTeamRepositories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeamRepository upsert
 */
export type MetricsGithubTeamRepositoryUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubTeamRepository to update in case it exists.
   */
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  /**
   * In case the MetricsGithubTeamRepository found by the `where` argument doesn't exist, create a new MetricsGithubTeamRepository with this data.
   */
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryCreateInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedCreateInput
  >;
  /**
   * In case the MetricsGithubTeamRepository was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamRepositoryUpdateInput,
    Prisma.MetricsGithubTeamRepositoryUncheckedUpdateInput
  >;
};

/**
 * MetricsGithubTeamRepository delete
 */
export type MetricsGithubTeamRepositoryDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubTeamRepository to delete.
   */
  where: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
};

/**
 * MetricsGithubTeamRepository deleteMany
 */
export type MetricsGithubTeamRepositoryDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeamRepositories to delete
   */
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  /**
   * Limit how many MetricsGithubTeamRepositories to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubTeamRepository without action
 */
export type MetricsGithubTeamRepositoryDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
};
