/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsSettings
 * Settings for the metrics module, with tenant-based separation
 * Each tenant can have only one record with enabled = true
 */
export type MetricsSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$MetricsSettingsPayload>;

export type AggregateMetricsSettings = {
  _count: MetricsSettingsCountAggregateOutputType | null;
  _min: MetricsSettingsMinAggregateOutputType | null;
  _max: MetricsSettingsMaxAggregateOutputType | null;
};

export type MetricsSettingsMinAggregateOutputType = {
  id: string | null;
  tenantId: string | null;
  enabled: boolean | null;
  githubToken: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type MetricsSettingsMaxAggregateOutputType = {
  id: string | null;
  tenantId: string | null;
  enabled: boolean | null;
  githubToken: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type MetricsSettingsCountAggregateOutputType = {
  id: number;
  tenantId: number;
  enabled: number;
  githubToken: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type MetricsSettingsMinAggregateInputType = {
  id?: true;
  tenantId?: true;
  enabled?: true;
  githubToken?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type MetricsSettingsMaxAggregateInputType = {
  id?: true;
  tenantId?: true;
  enabled?: true;
  githubToken?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type MetricsSettingsCountAggregateInputType = {
  id?: true;
  tenantId?: true;
  enabled?: true;
  githubToken?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type MetricsSettingsAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsSettings to aggregate.
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsSettings to fetch.
   */
  orderBy?: Prisma.MetricsSettingsOrderByWithRelationInput | Prisma.MetricsSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsSettings
   **/
  _count?: true | MetricsSettingsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsSettingsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsSettingsMaxAggregateInputType;
};

export type GetMetricsSettingsAggregateType<T extends MetricsSettingsAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsSettings[P]>;
};

export type MetricsSettingsGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsSettingsWhereInput;
  orderBy?: Prisma.MetricsSettingsOrderByWithAggregationInput | Prisma.MetricsSettingsOrderByWithAggregationInput[];
  by: Prisma.MetricsSettingsScalarFieldEnum[] | Prisma.MetricsSettingsScalarFieldEnum;
  having?: Prisma.MetricsSettingsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsSettingsCountAggregateInputType | true;
  _min?: MetricsSettingsMinAggregateInputType;
  _max?: MetricsSettingsMaxAggregateInputType;
};

export type MetricsSettingsGroupByOutputType = {
  id: string;
  tenantId: string;
  enabled: boolean;
  githubToken: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: MetricsSettingsCountAggregateOutputType | null;
  _min: MetricsSettingsMinAggregateOutputType | null;
  _max: MetricsSettingsMaxAggregateOutputType | null;
};

type GetMetricsSettingsGroupByPayload<T extends MetricsSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsSettingsGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsSettingsGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsSettingsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsSettingsGroupByOutputType[P]>;
    }
  >
>;

export type MetricsSettingsWhereInput = {
  AND?: Prisma.MetricsSettingsWhereInput | Prisma.MetricsSettingsWhereInput[];
  OR?: Prisma.MetricsSettingsWhereInput[];
  NOT?: Prisma.MetricsSettingsWhereInput | Prisma.MetricsSettingsWhereInput[];
  id?: Prisma.UuidFilter<'MetricsSettings'> | string;
  tenantId?: Prisma.UuidFilter<'MetricsSettings'> | string;
  enabled?: Prisma.BoolFilter<'MetricsSettings'> | boolean;
  githubToken?: Prisma.StringNullableFilter<'MetricsSettings'> | string | null;
  createdAt?: Prisma.DateTimeFilter<'MetricsSettings'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsSettings'> | Date | string;
};

export type MetricsSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  githubToken?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MetricsSettingsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.MetricsSettingsWhereInput | Prisma.MetricsSettingsWhereInput[];
    OR?: Prisma.MetricsSettingsWhereInput[];
    NOT?: Prisma.MetricsSettingsWhereInput | Prisma.MetricsSettingsWhereInput[];
    tenantId?: Prisma.UuidFilter<'MetricsSettings'> | string;
    enabled?: Prisma.BoolFilter<'MetricsSettings'> | boolean;
    githubToken?: Prisma.StringNullableFilter<'MetricsSettings'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'MetricsSettings'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsSettings'> | Date | string;
  },
  'id'
>;

export type MetricsSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  githubToken?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.MetricsSettingsCountOrderByAggregateInput;
  _max?: Prisma.MetricsSettingsMaxOrderByAggregateInput;
  _min?: Prisma.MetricsSettingsMinOrderByAggregateInput;
};

export type MetricsSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.MetricsSettingsScalarWhereWithAggregatesInput | Prisma.MetricsSettingsScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsSettingsScalarWhereWithAggregatesInput[];
  NOT?: Prisma.MetricsSettingsScalarWhereWithAggregatesInput | Prisma.MetricsSettingsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsSettings'> | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsSettings'> | string;
  enabled?: Prisma.BoolWithAggregatesFilter<'MetricsSettings'> | boolean;
  githubToken?: Prisma.StringNullableWithAggregatesFilter<'MetricsSettings'> | string | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsSettings'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsSettings'> | Date | string;
};

export type MetricsSettingsCreateInput = {
  id?: string;
  tenantId: string;
  enabled?: boolean;
  githubToken?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type MetricsSettingsUncheckedCreateInput = {
  id?: string;
  tenantId: string;
  enabled?: boolean;
  githubToken?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type MetricsSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  githubToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MetricsSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  githubToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MetricsSettingsCreateManyInput = {
  id?: string;
  tenantId: string;
  enabled?: boolean;
  githubToken?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type MetricsSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  githubToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MetricsSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  githubToken?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type MetricsSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  githubToken?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MetricsSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  githubToken?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MetricsSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  enabled?: Prisma.SortOrder;
  githubToken?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type MetricsSettingsSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    tenantId?: boolean;
    enabled?: boolean;
    githubToken?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['metricsSettings']
>;

export type MetricsSettingsSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    tenantId?: boolean;
    enabled?: boolean;
    githubToken?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['metricsSettings']
>;

export type MetricsSettingsSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    tenantId?: boolean;
    enabled?: boolean;
    githubToken?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['metricsSettings']
>;

export type MetricsSettingsSelectScalar = {
  id?: boolean;
  tenantId?: boolean;
  enabled?: boolean;
  githubToken?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type MetricsSettingsOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'tenantId' | 'enabled' | 'githubToken' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['metricsSettings']
>;

export type $MetricsSettingsPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsSettings';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
      /**
       * @DtoCreateOptional
       * @DtoUpdateOptional
       */
      enabled: boolean;
      githubToken: string | null;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
    },
    ExtArgs['result']['metricsSettings']
  >;
  composites: {};
};

export type MetricsSettingsGetPayload<S extends boolean | null | undefined | MetricsSettingsDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload, S>;

export type MetricsSettingsCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsSettingsCountAggregateInputType | true;
};

export interface MetricsSettingsDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricsSettings']; meta: { name: 'MetricsSettings' } };
  /**
   * Find zero or one MetricsSettings that matches the filter.
   * @param {MetricsSettingsFindUniqueArgs} args - Arguments to find a MetricsSettings
   * @example
   * // Get one MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsSettingsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'findUnique', GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsSettingsFindUniqueOrThrowArgs} args - Arguments to find a MetricsSettings
   * @example
   * // Get one MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsSettingsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsFindFirstArgs} args - Arguments to find a MetricsSettings
   * @example
   * // Get one MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsSettingsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsFindFirstOrThrowArgs} args - Arguments to find a MetricsSettings
   * @example
   * // Get one MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsSettingsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findMany()
   *
   * // Get first 10 MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsSettingsWithIdOnly = await prisma.metricsSettings.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsSettingsFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsSettings.
   * @param {MetricsSettingsCreateArgs} args - Arguments to create a MetricsSettings.
   * @example
   * // Create one MetricsSettings
   * const MetricsSettings = await prisma.metricsSettings.create({
   *   data: {
   *     // ... data to create a MetricsSettings
   *   }
   * })
   *
   */
  create<T extends MetricsSettingsCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsSettings.
   * @param {MetricsSettingsCreateManyArgs} args - Arguments to create many MetricsSettings.
   * @example
   * // Create many MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsSettingsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsSettings and returns the data saved in the database.
   * @param {MetricsSettingsCreateManyAndReturnArgs} args - Arguments to create many MetricsSettings.
   * @example
   * // Create many MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsSettings and only return the `id`
   * const metricsSettingsWithIdOnly = await prisma.metricsSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsSettingsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'createManyAndReturn', GlobalOmitOptions>
  >;

  /**
   * Delete a MetricsSettings.
   * @param {MetricsSettingsDeleteArgs} args - Arguments to delete one MetricsSettings.
   * @example
   * // Delete one MetricsSettings
   * const MetricsSettings = await prisma.metricsSettings.delete({
   *   where: {
   *     // ... filter to delete one MetricsSettings
   *   }
   * })
   *
   */
  delete<T extends MetricsSettingsDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsSettings.
   * @param {MetricsSettingsUpdateArgs} args - Arguments to update one MetricsSettings.
   * @example
   * // Update one MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsSettingsUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsSettings.
   * @param {MetricsSettingsDeleteManyArgs} args - Arguments to filter MetricsSettings to delete.
   * @example
   * // Delete a few MetricsSettings
   * const { count } = await prisma.metricsSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsSettingsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsSettingsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsSettingsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsSettings and returns the data updated in the database.
   * @param {MetricsSettingsUpdateManyAndReturnArgs} args - Arguments to update many MetricsSettings.
   * @example
   * // Update many MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsSettings and only return the `id`
   * const metricsSettingsWithIdOnly = await prisma.metricsSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsSettingsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'updateManyAndReturn', GlobalOmitOptions>
  >;

  /**
   * Create or update one MetricsSettings.
   * @param {MetricsSettingsUpsertArgs} args - Arguments to update or create a MetricsSettings.
   * @example
   * // Update or create a MetricsSettings
   * const metricsSettings = await prisma.metricsSettings.upsert({
   *   create: {
   *     // ... data to create a MetricsSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsSettings we want to update
   *   }
   * })
   */
  upsert<T extends MetricsSettingsUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsSettingsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsSettingsClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsSettingsPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsCountArgs} args - Arguments to filter MetricsSettings to count.
   * @example
   * // Count the number of MetricsSettings
   * const count = await prisma.metricsSettings.count({
   *   where: {
   *     // ... the filter for the MetricsSettings we want to count
   *   }
   * })
   **/
  count<T extends MetricsSettingsCountArgs>(
    args?: Prisma.Subset<T, MetricsSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsSettingsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsSettingsAggregateArgs>(
    args: Prisma.Subset<T, MetricsSettingsAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsSettingsAggregateType<T>>;

  /**
   * Group by MetricsSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsSettingsGroupByArgs['orderBy'] }
      : { orderBy?: MetricsSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsSettingsGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsSettings model
   */
  readonly fields: MetricsSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsSettingsClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsSettings model
 */
export interface MetricsSettingsFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsSettings', 'String'>;
  readonly tenantId: Prisma.FieldRef<'MetricsSettings', 'String'>;
  readonly enabled: Prisma.FieldRef<'MetricsSettings', 'Boolean'>;
  readonly githubToken: Prisma.FieldRef<'MetricsSettings', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsSettings', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsSettings', 'DateTime'>;
}

// Custom InputTypes
/**
 * MetricsSettings findUnique
 */
export type MetricsSettingsFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter, which MetricsSettings to fetch.
   */
  where: Prisma.MetricsSettingsWhereUniqueInput;
};

/**
 * MetricsSettings findUniqueOrThrow
 */
export type MetricsSettingsFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter, which MetricsSettings to fetch.
   */
  where: Prisma.MetricsSettingsWhereUniqueInput;
};

/**
 * MetricsSettings findFirst
 */
export type MetricsSettingsFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter, which MetricsSettings to fetch.
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsSettings to fetch.
   */
  orderBy?: Prisma.MetricsSettingsOrderByWithRelationInput | Prisma.MetricsSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsSettings.
   */
  cursor?: Prisma.MetricsSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsSettings.
   */
  distinct?: Prisma.MetricsSettingsScalarFieldEnum | Prisma.MetricsSettingsScalarFieldEnum[];
};

/**
 * MetricsSettings findFirstOrThrow
 */
export type MetricsSettingsFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter, which MetricsSettings to fetch.
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsSettings to fetch.
   */
  orderBy?: Prisma.MetricsSettingsOrderByWithRelationInput | Prisma.MetricsSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsSettings.
   */
  cursor?: Prisma.MetricsSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsSettings.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsSettings.
   */
  distinct?: Prisma.MetricsSettingsScalarFieldEnum | Prisma.MetricsSettingsScalarFieldEnum[];
};

/**
 * MetricsSettings findMany
 */
export type MetricsSettingsFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter, which MetricsSettings to fetch.
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsSettings to fetch.
   */
  orderBy?: Prisma.MetricsSettingsOrderByWithRelationInput | Prisma.MetricsSettingsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsSettings.
   */
  cursor?: Prisma.MetricsSettingsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsSettings from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsSettings.
   */
  skip?: number;
  distinct?: Prisma.MetricsSettingsScalarFieldEnum | Prisma.MetricsSettingsScalarFieldEnum[];
};

/**
 * MetricsSettings create
 */
export type MetricsSettingsCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * The data needed to create a MetricsSettings.
   */
  data: Prisma.XOR<Prisma.MetricsSettingsCreateInput, Prisma.MetricsSettingsUncheckedCreateInput>;
};

/**
 * MetricsSettings createMany
 */
export type MetricsSettingsCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsSettings.
   */
  data: Prisma.MetricsSettingsCreateManyInput | Prisma.MetricsSettingsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsSettings createManyAndReturn
 */
export type MetricsSettingsCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsSettings.
   */
  data: Prisma.MetricsSettingsCreateManyInput | Prisma.MetricsSettingsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsSettings update
 */
export type MetricsSettingsUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * The data needed to update a MetricsSettings.
   */
  data: Prisma.XOR<Prisma.MetricsSettingsUpdateInput, Prisma.MetricsSettingsUncheckedUpdateInput>;
  /**
   * Choose, which MetricsSettings to update.
   */
  where: Prisma.MetricsSettingsWhereUniqueInput;
};

/**
 * MetricsSettings updateMany
 */
export type MetricsSettingsUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsSettings.
   */
  data: Prisma.XOR<Prisma.MetricsSettingsUpdateManyMutationInput, Prisma.MetricsSettingsUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsSettings to update
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * Limit how many MetricsSettings to update.
   */
  limit?: number;
};

/**
 * MetricsSettings updateManyAndReturn
 */
export type MetricsSettingsUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsSettings.
   */
  data: Prisma.XOR<Prisma.MetricsSettingsUpdateManyMutationInput, Prisma.MetricsSettingsUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsSettings to update
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * Limit how many MetricsSettings to update.
   */
  limit?: number;
};

/**
 * MetricsSettings upsert
 */
export type MetricsSettingsUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * The filter to search for the MetricsSettings to update in case it exists.
   */
  where: Prisma.MetricsSettingsWhereUniqueInput;
  /**
   * In case the MetricsSettings found by the `where` argument doesn't exist, create a new MetricsSettings with this data.
   */
  create: Prisma.XOR<Prisma.MetricsSettingsCreateInput, Prisma.MetricsSettingsUncheckedCreateInput>;
  /**
   * In case the MetricsSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsSettingsUpdateInput, Prisma.MetricsSettingsUncheckedUpdateInput>;
};

/**
 * MetricsSettings delete
 */
export type MetricsSettingsDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
  /**
   * Filter which MetricsSettings to delete.
   */
  where: Prisma.MetricsSettingsWhereUniqueInput;
};

/**
 * MetricsSettings deleteMany
 */
export type MetricsSettingsDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsSettings to delete
   */
  where?: Prisma.MetricsSettingsWhereInput;
  /**
   * Limit how many MetricsSettings to delete.
   */
  limit?: number;
};

/**
 * MetricsSettings without action
 */
export type MetricsSettingsDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsSettings
   */
  select?: Prisma.MetricsSettingsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsSettings
   */
  omit?: Prisma.MetricsSettingsOmit<ExtArgs> | null;
};
