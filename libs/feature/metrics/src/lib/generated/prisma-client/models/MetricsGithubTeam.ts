/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubTeam` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubTeam
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubTeamModel = runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubTeamPayload>;

export type AggregateMetricsGithubTeam = {
  _count: MetricsGithubTeamCountAggregateOutputType | null;
  _min: MetricsGithubTeamMinAggregateOutputType | null;
  _max: MetricsGithubTeamMaxAggregateOutputType | null;
};

export type MetricsGithubTeamMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamCountAggregateOutputType = {
  id: number;
  name: number;
  description: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubTeamMinAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamMaxAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamCountAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubTeamAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeam to aggregate.
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeams to fetch.
   */
  orderBy?: Prisma.MetricsGithubTeamOrderByWithRelationInput | Prisma.MetricsGithubTeamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubTeamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubTeams
   **/
  _count?: true | MetricsGithubTeamCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubTeamMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubTeamMaxAggregateInputType;
};

export type GetMetricsGithubTeamAggregateType<T extends MetricsGithubTeamAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubTeam]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeam[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeam[P]>;
};

export type MetricsGithubTeamGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubTeamWhereInput;
  orderBy?: Prisma.MetricsGithubTeamOrderByWithAggregationInput | Prisma.MetricsGithubTeamOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubTeamScalarFieldEnum[] | Prisma.MetricsGithubTeamScalarFieldEnum;
  having?: Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubTeamCountAggregateInputType | true;
  _min?: MetricsGithubTeamMinAggregateInputType;
  _max?: MetricsGithubTeamMaxAggregateInputType;
};

export type MetricsGithubTeamGroupByOutputType = {
  id: string;
  name: string;
  description: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubTeamCountAggregateOutputType | null;
  _min: MetricsGithubTeamMinAggregateOutputType | null;
  _max: MetricsGithubTeamMaxAggregateOutputType | null;
};

type GetMetricsGithubTeamGroupByPayload<T extends MetricsGithubTeamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsGithubTeamGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsGithubTeamGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsGithubTeamGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsGithubTeamGroupByOutputType[P]>;
    }
  >
>;

export type MetricsGithubTeamWhereInput = {
  AND?: Prisma.MetricsGithubTeamWhereInput | Prisma.MetricsGithubTeamWhereInput[];
  OR?: Prisma.MetricsGithubTeamWhereInput[];
  NOT?: Prisma.MetricsGithubTeamWhereInput | Prisma.MetricsGithubTeamWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  name?: Prisma.StringFilter<'MetricsGithubTeam'> | string;
  description?: Prisma.StringNullableFilter<'MetricsGithubTeam'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryListRelationFilter;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserListRelationFilter;
};

export type MetricsGithubTeamOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryOrderByRelationAggregateInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserOrderByRelationAggregateInput;
};

export type MetricsGithubTeamWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_name?: Prisma.MetricsGithubTeamTenantIdNameCompoundUniqueInput;
    AND?: Prisma.MetricsGithubTeamWhereInput | Prisma.MetricsGithubTeamWhereInput[];
    OR?: Prisma.MetricsGithubTeamWhereInput[];
    NOT?: Prisma.MetricsGithubTeamWhereInput | Prisma.MetricsGithubTeamWhereInput[];
    name?: Prisma.StringFilter<'MetricsGithubTeam'> | string;
    description?: Prisma.StringNullableFilter<'MetricsGithubTeam'> | string | null;
    createdBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
    MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryListRelationFilter;
    MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserListRelationFilter;
  },
  'id' | 'tenantId_name'
>;

export type MetricsGithubTeamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubTeamCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubTeamMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubTeamMinOrderByAggregateInput;
};

export type MetricsGithubTeamScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeam'> | string;
  name?: Prisma.StringWithAggregatesFilter<'MetricsGithubTeam'> | string;
  description?: Prisma.StringNullableWithAggregatesFilter<'MetricsGithubTeam'> | string | null;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeam'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeam'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeam'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeam'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeam'> | string;
};

export type MetricsGithubTeamCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUncheckedCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserNestedInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamCreateManyInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamListRelationFilter = {
  every?: Prisma.MetricsGithubTeamWhereInput;
  some?: Prisma.MetricsGithubTeamWhereInput;
  none?: Prisma.MetricsGithubTeamWhereInput;
};

export type MetricsGithubTeamOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubTeamTenantIdNameCompoundUniqueInput = {
  tenantId: string;
  name: string;
};

export type MetricsGithubTeamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamScalarRelationFilter = {
  is?: Prisma.MetricsGithubTeamWhereInput;
  isNot?: Prisma.MetricsGithubTeamWhereInput;
};

export type MetricsGithubTeamCreateNestedManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
        Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
};

export type MetricsGithubTeamCreateNestedManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
        Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInputEnvelope;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
};

export type MetricsGithubTeamUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  };

export type MetricsGithubTeamUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  };

export type MetricsGithubTeamUpdateManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
        Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      >
    | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[]
    | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
};

export type MetricsGithubTeamUpdateManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
        Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      >
    | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[]
    | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInputEnvelope;
  set?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  deleteMany?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
};

export type MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
  };

export type MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamWhereUniqueInput | Prisma.MetricsGithubTeamWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
  };

export type MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamRepositoryInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamRepositoryInput;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput;
};

export type MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamRepositoryNestedInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamRepositoryInput
  >;
  connectOrCreate?: Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamRepositoryInput;
  upsert?: Prisma.MetricsGithubTeamUpsertWithoutMetricsGithubTeamRepositoryInput;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MetricsGithubTeamUpdateToOneWithWhereWithoutMetricsGithubTeamRepositoryInput,
      Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamRepositoryInput
    >,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamRepositoryInput
  >;
};

export type MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamUserInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamUserInput
  >;
  connectOrCreate?: Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamUserInput;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput;
};

export type MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamUserInput
  >;
  connectOrCreate?: Prisma.MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamUserInput;
  upsert?: Prisma.MetricsGithubTeamUpsertWithoutMetricsGithubTeamUserInput;
  connect?: Prisma.MetricsGithubTeamWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MetricsGithubTeamUpdateToOneWithWhereWithoutMetricsGithubTeamUserInput,
      Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamUserInput
    >,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamUserInput
  >;
};

export type MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
  >;
};

export type MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamCreateOrConnectWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput
  >;
};

export type MetricsGithubTeamScalarWhereInput = {
  AND?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
  OR?: Prisma.MetricsGithubTeamScalarWhereInput[];
  NOT?: Prisma.MetricsGithubTeamScalarWhereInput | Prisma.MetricsGithubTeamScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  name?: Prisma.StringFilter<'MetricsGithubTeam'> | string;
  description?: Prisma.StringNullableFilter<'MetricsGithubTeam'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeam'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeam'> | string;
};

export type MetricsGithubTeamUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubTeamCreateWithoutMetricsGithubTeamRepositoryInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamRepositoryInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamRepositoryInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamRepositoryInput
  >;
};

export type MetricsGithubTeamUpsertWithoutMetricsGithubTeamRepositoryInput = {
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamRepositoryInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamRepositoryInput
  >;
  where?: Prisma.MetricsGithubTeamWhereInput;
};

export type MetricsGithubTeamUpdateToOneWithWhereWithoutMetricsGithubTeamRepositoryInput = {
  where?: Prisma.MetricsGithubTeamWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamRepositoryInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamRepositoryInput
  >;
};

export type MetricsGithubTeamUpdateWithoutMetricsGithubTeamRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamRepositoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamCreateWithoutMetricsGithubTeamUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedCreateNestedManyWithoutMetricsGithubTeamInput;
};

export type MetricsGithubTeamCreateOrConnectWithoutMetricsGithubTeamUserInput = {
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamUserInput
  >;
};

export type MetricsGithubTeamUpsertWithoutMetricsGithubTeamUserInput = {
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamCreateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedCreateWithoutMetricsGithubTeamUserInput
  >;
  where?: Prisma.MetricsGithubTeamWhereInput;
};

export type MetricsGithubTeamUpdateToOneWithWhereWithoutMetricsGithubTeamUserInput = {
  where?: Prisma.MetricsGithubTeamWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUpdateWithoutMetricsGithubTeamUserInput,
    Prisma.MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamUserInput
  >;
};

export type MetricsGithubTeamUpdateWithoutMetricsGithubTeamUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserNestedInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateWithoutMetricsGithubTeamUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamCreateManyMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: string;
  name: string;
  description?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_updatedByToMetricsUserNestedInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeam_MetricsGithubTeam_createdByToMetricsUserNestedInput;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeamRepository?: Prisma.MetricsGithubTeamRepositoryUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
  MetricsGithubTeamUser?: Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput;
};

export type MetricsGithubTeamUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeam_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type MetricsGithubTeamCountOutputType
 */

export type MetricsGithubTeamCountOutputType = {
  MetricsGithubTeamRepository: number;
  MetricsGithubTeamUser: number;
};

export type MetricsGithubTeamCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsGithubTeamRepository?: boolean | MetricsGithubTeamCountOutputTypeCountMetricsGithubTeamRepositoryArgs;
  MetricsGithubTeamUser?: boolean | MetricsGithubTeamCountOutputTypeCountMetricsGithubTeamUserArgs;
};

/**
 * MetricsGithubTeamCountOutputType without action
 */
export type MetricsGithubTeamCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamCountOutputType
   */
  select?: Prisma.MetricsGithubTeamCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * MetricsGithubTeamCountOutputType without action
 */
export type MetricsGithubTeamCountOutputTypeCountMetricsGithubTeamRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
};

/**
 * MetricsGithubTeamCountOutputType without action
 */
export type MetricsGithubTeamCountOutputTypeCountMetricsGithubTeamUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubTeamUserWhereInput;
};

export type MetricsGithubTeamSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubTeamRepository?: boolean | Prisma.MetricsGithubTeam$MetricsGithubTeamRepositoryArgs<ExtArgs>;
    MetricsGithubTeamUser?: boolean | Prisma.MetricsGithubTeam$MetricsGithubTeamUserArgs<ExtArgs>;
    _count?: boolean | Prisma.MetricsGithubTeamCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeam']
>;

export type MetricsGithubTeamSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeam']
>;

export type MetricsGithubTeamSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeam']
>;

export type MetricsGithubTeamSelectScalar = {
  id?: boolean;
  name?: boolean;
  description?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubTeamOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'description' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubTeam']
>;
export type MetricsGithubTeamInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubTeamRepository?: boolean | Prisma.MetricsGithubTeam$MetricsGithubTeamRepositoryArgs<ExtArgs>;
  MetricsGithubTeamUser?: boolean | Prisma.MetricsGithubTeam$MetricsGithubTeamUserArgs<ExtArgs>;
  _count?: boolean | Prisma.MetricsGithubTeamCountOutputTypeDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubTeamPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubTeam';
  objects: {
    MetricsUser_MetricsGithubTeam_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsUser_MetricsGithubTeam_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubTeamRepository: Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>[];
    MetricsGithubTeamUser: Prisma.$MetricsGithubTeamUserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      name: string;
      description: string | null;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubTeam']
  >;
  composites: {};
};

export type MetricsGithubTeamGetPayload<S extends boolean | null | undefined | MetricsGithubTeamDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload, S>;

export type MetricsGithubTeamCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubTeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubTeamCountAggregateInputType | true;
};

export interface MetricsGithubTeamDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubTeam']; meta: { name: 'MetricsGithubTeam' } };
  /**
   * Find zero or one MetricsGithubTeam that matches the filter.
   * @param {MetricsGithubTeamFindUniqueArgs} args - Arguments to find a MetricsGithubTeam
   * @example
   * // Get one MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubTeamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubTeam that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubTeamFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubTeam
   * @example
   * // Get one MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubTeamFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeam that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamFindFirstArgs} args - Arguments to find a MetricsGithubTeam
   * @example
   * // Get one MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubTeamFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'findFirst', GlobalOmitOptions> | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeam that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubTeam
   * @example
   * // Get one MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubTeamFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'findFirstOrThrow', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubTeams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubTeams
   * const metricsGithubTeams = await prisma.metricsGithubTeam.findMany()
   *
   * // Get first 10 MetricsGithubTeams
   * const metricsGithubTeams = await prisma.metricsGithubTeam.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubTeamWithIdOnly = await prisma.metricsGithubTeam.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubTeamFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsGithubTeam.
   * @param {MetricsGithubTeamCreateArgs} args - Arguments to create a MetricsGithubTeam.
   * @example
   * // Create one MetricsGithubTeam
   * const MetricsGithubTeam = await prisma.metricsGithubTeam.create({
   *   data: {
   *     // ... data to create a MetricsGithubTeam
   *   }
   * })
   *
   */
  create<T extends MetricsGithubTeamCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubTeams.
   * @param {MetricsGithubTeamCreateManyArgs} args - Arguments to create many MetricsGithubTeams.
   * @example
   * // Create many MetricsGithubTeams
   * const metricsGithubTeam = await prisma.metricsGithubTeam.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubTeamCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubTeams and returns the data saved in the database.
   * @param {MetricsGithubTeamCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubTeams.
   * @example
   * // Create many MetricsGithubTeams
   * const metricsGithubTeam = await prisma.metricsGithubTeam.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubTeams and only return the `id`
   * const metricsGithubTeamWithIdOnly = await prisma.metricsGithubTeam.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubTeamCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubTeam.
   * @param {MetricsGithubTeamDeleteArgs} args - Arguments to delete one MetricsGithubTeam.
   * @example
   * // Delete one MetricsGithubTeam
   * const MetricsGithubTeam = await prisma.metricsGithubTeam.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubTeam
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubTeamDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubTeam.
   * @param {MetricsGithubTeamUpdateArgs} args - Arguments to update one MetricsGithubTeam.
   * @example
   * // Update one MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubTeamUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubTeams.
   * @param {MetricsGithubTeamDeleteManyArgs} args - Arguments to filter MetricsGithubTeams to delete.
   * @example
   * // Delete a few MetricsGithubTeams
   * const { count } = await prisma.metricsGithubTeam.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubTeamDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubTeams
   * const metricsGithubTeam = await prisma.metricsGithubTeam.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubTeamUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeams and returns the data updated in the database.
   * @param {MetricsGithubTeamUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubTeams.
   * @example
   * // Update many MetricsGithubTeams
   * const metricsGithubTeam = await prisma.metricsGithubTeam.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubTeams and only return the `id`
   * const metricsGithubTeamWithIdOnly = await prisma.metricsGithubTeam.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubTeamUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubTeam.
   * @param {MetricsGithubTeamUpsertArgs} args - Arguments to update or create a MetricsGithubTeam.
   * @example
   * // Update or create a MetricsGithubTeam
   * const metricsGithubTeam = await prisma.metricsGithubTeam.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubTeam
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubTeam we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubTeamUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubTeams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamCountArgs} args - Arguments to filter MetricsGithubTeams to count.
   * @example
   * // Count the number of MetricsGithubTeams
   * const count = await prisma.metricsGithubTeam.count({
   *   where: {
   *     // ... the filter for the MetricsGithubTeams we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubTeamCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubTeamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubTeamCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubTeam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubTeamAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubTeamAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubTeamAggregateType<T>>;

  /**
   * Group by MetricsGithubTeam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubTeamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubTeamGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubTeamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubTeamGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubTeam model
   */
  readonly fields: MetricsGithubTeamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubTeam.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubTeamClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubTeam_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubTeam_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubTeamRepository<T extends Prisma.MetricsGithubTeam$MetricsGithubTeamRepositoryArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubTeam$MetricsGithubTeamRepositoryArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubTeamRepositoryPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  MetricsGithubTeamUser<T extends Prisma.MetricsGithubTeam$MetricsGithubTeamUserArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubTeam$MetricsGithubTeamUserArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubTeam model
 */
export interface MetricsGithubTeamFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
  readonly name: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
  readonly description: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubTeam', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubTeam', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubTeam', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubTeam findUnique
 */
export type MetricsGithubTeamFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeam to fetch.
   */
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
};

/**
 * MetricsGithubTeam findUniqueOrThrow
 */
export type MetricsGithubTeamFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeam to fetch.
   */
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
};

/**
 * MetricsGithubTeam findFirst
 */
export type MetricsGithubTeamFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeam to fetch.
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeams to fetch.
   */
  orderBy?: Prisma.MetricsGithubTeamOrderByWithRelationInput | Prisma.MetricsGithubTeamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeams.
   */
  cursor?: Prisma.MetricsGithubTeamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeams.
   */
  distinct?: Prisma.MetricsGithubTeamScalarFieldEnum | Prisma.MetricsGithubTeamScalarFieldEnum[];
};

/**
 * MetricsGithubTeam findFirstOrThrow
 */
export type MetricsGithubTeamFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeam to fetch.
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeams to fetch.
   */
  orderBy?: Prisma.MetricsGithubTeamOrderByWithRelationInput | Prisma.MetricsGithubTeamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeams.
   */
  cursor?: Prisma.MetricsGithubTeamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeams.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeams.
   */
  distinct?: Prisma.MetricsGithubTeamScalarFieldEnum | Prisma.MetricsGithubTeamScalarFieldEnum[];
};

/**
 * MetricsGithubTeam findMany
 */
export type MetricsGithubTeamFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeams to fetch.
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeams to fetch.
   */
  orderBy?: Prisma.MetricsGithubTeamOrderByWithRelationInput | Prisma.MetricsGithubTeamOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubTeams.
   */
  cursor?: Prisma.MetricsGithubTeamWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeams from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeams.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubTeamScalarFieldEnum | Prisma.MetricsGithubTeamScalarFieldEnum[];
};

/**
 * MetricsGithubTeam create
 */
export type MetricsGithubTeamCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubTeam.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamCreateInput, Prisma.MetricsGithubTeamUncheckedCreateInput>;
};

/**
 * MetricsGithubTeam createMany
 */
export type MetricsGithubTeamCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubTeams.
   */
  data: Prisma.MetricsGithubTeamCreateManyInput | Prisma.MetricsGithubTeamCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubTeam createManyAndReturn
 */
export type MetricsGithubTeamCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubTeams.
   */
  data: Prisma.MetricsGithubTeamCreateManyInput | Prisma.MetricsGithubTeamCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeam update
 */
export type MetricsGithubTeamUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubTeam.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamUpdateInput, Prisma.MetricsGithubTeamUncheckedUpdateInput>;
  /**
   * Choose, which MetricsGithubTeam to update.
   */
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
};

/**
 * MetricsGithubTeam updateMany
 */
export type MetricsGithubTeamUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubTeams.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamUpdateManyMutationInput, Prisma.MetricsGithubTeamUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsGithubTeams to update
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * Limit how many MetricsGithubTeams to update.
   */
  limit?: number;
};

/**
 * MetricsGithubTeam updateManyAndReturn
 */
export type MetricsGithubTeamUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubTeams.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamUpdateManyMutationInput, Prisma.MetricsGithubTeamUncheckedUpdateManyInput>;
  /**
   * Filter which MetricsGithubTeams to update
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * Limit how many MetricsGithubTeams to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeam upsert
 */
export type MetricsGithubTeamUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubTeam to update in case it exists.
   */
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
  /**
   * In case the MetricsGithubTeam found by the `where` argument doesn't exist, create a new MetricsGithubTeam with this data.
   */
  create: Prisma.XOR<Prisma.MetricsGithubTeamCreateInput, Prisma.MetricsGithubTeamUncheckedCreateInput>;
  /**
   * In case the MetricsGithubTeam was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsGithubTeamUpdateInput, Prisma.MetricsGithubTeamUncheckedUpdateInput>;
};

/**
 * MetricsGithubTeam delete
 */
export type MetricsGithubTeamDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubTeam to delete.
   */
  where: Prisma.MetricsGithubTeamWhereUniqueInput;
};

/**
 * MetricsGithubTeam deleteMany
 */
export type MetricsGithubTeamDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeams to delete
   */
  where?: Prisma.MetricsGithubTeamWhereInput;
  /**
   * Limit how many MetricsGithubTeams to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubTeam.MetricsGithubTeamRepository
 */
export type MetricsGithubTeam$MetricsGithubTeamRepositoryArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamRepository
   */
  select?: Prisma.MetricsGithubTeamRepositorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamRepository
   */
  omit?: Prisma.MetricsGithubTeamRepositoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamRepositoryInclude<ExtArgs> | null;
  where?: Prisma.MetricsGithubTeamRepositoryWhereInput;
  orderBy?:
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput
    | Prisma.MetricsGithubTeamRepositoryOrderByWithRelationInput[];
  cursor?: Prisma.MetricsGithubTeamRepositoryWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MetricsGithubTeamRepositoryScalarFieldEnum | Prisma.MetricsGithubTeamRepositoryScalarFieldEnum[];
};

/**
 * MetricsGithubTeam.MetricsGithubTeamUser
 */
export type MetricsGithubTeam$MetricsGithubTeamUserArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput[];
  cursor?: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.MetricsGithubTeamUserScalarFieldEnum | Prisma.MetricsGithubTeamUserScalarFieldEnum[];
};

/**
 * MetricsGithubTeam without action
 */
export type MetricsGithubTeamDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeam
   */
  select?: Prisma.MetricsGithubTeamSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeam
   */
  omit?: Prisma.MetricsGithubTeamOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamInclude<ExtArgs> | null;
};
