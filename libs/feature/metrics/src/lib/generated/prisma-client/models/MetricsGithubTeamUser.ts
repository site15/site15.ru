/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `MetricsGithubTeamUser` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/client';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model MetricsGithubTeamUser
 * This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
 */
export type MetricsGithubTeamUserModel = runtime.Types.Result.DefaultSelection<Prisma.$MetricsGithubTeamUserPayload>;

export type AggregateMetricsGithubTeamUser = {
  _count: MetricsGithubTeamUserCountAggregateOutputType | null;
  _min: MetricsGithubTeamUserMinAggregateOutputType | null;
  _max: MetricsGithubTeamUserMaxAggregateOutputType | null;
};

export type MetricsGithubTeamUserMinAggregateOutputType = {
  id: string | null;
  teamId: string | null;
  userId: string | null;
  role: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamUserMaxAggregateOutputType = {
  id: string | null;
  teamId: string | null;
  userId: string | null;
  role: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  tenantId: string | null;
};

export type MetricsGithubTeamUserCountAggregateOutputType = {
  id: number;
  teamId: number;
  userId: number;
  role: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  tenantId: number;
  _all: number;
};

export type MetricsGithubTeamUserMinAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamUserMaxAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
};

export type MetricsGithubTeamUserCountAggregateInputType = {
  id?: true;
  teamId?: true;
  userId?: true;
  role?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  tenantId?: true;
  _all?: true;
};

export type MetricsGithubTeamUserAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeamUser to aggregate.
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamUsers to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MetricsGithubTeamUsers
   **/
  _count?: true | MetricsGithubTeamUserCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricsGithubTeamUserMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricsGithubTeamUserMaxAggregateInputType;
};

export type GetMetricsGithubTeamUserAggregateType<T extends MetricsGithubTeamUserAggregateArgs> = {
  [P in keyof T & keyof AggregateMetricsGithubTeamUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeamUser[P]>
    : Prisma.GetScalarType<T[P], AggregateMetricsGithubTeamUser[P]>;
};

export type MetricsGithubTeamUserGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithAggregationInput
    | Prisma.MetricsGithubTeamUserOrderByWithAggregationInput[];
  by: Prisma.MetricsGithubTeamUserScalarFieldEnum[] | Prisma.MetricsGithubTeamUserScalarFieldEnum;
  having?: Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: MetricsGithubTeamUserCountAggregateInputType | true;
  _min?: MetricsGithubTeamUserMinAggregateInputType;
  _max?: MetricsGithubTeamUserMaxAggregateInputType;
};

export type MetricsGithubTeamUserGroupByOutputType = {
  id: string;
  teamId: string;
  userId: string;
  role: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  tenantId: string;
  _count: MetricsGithubTeamUserCountAggregateOutputType | null;
  _min: MetricsGithubTeamUserMinAggregateOutputType | null;
  _max: MetricsGithubTeamUserMaxAggregateOutputType | null;
};

type GetMetricsGithubTeamUserGroupByPayload<T extends MetricsGithubTeamUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetricsGithubTeamUserGroupByOutputType, T['by']> & {
      [P in keyof T & keyof MetricsGithubTeamUserGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], MetricsGithubTeamUserGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], MetricsGithubTeamUserGroupByOutputType[P]>;
    }
  >
>;

export type MetricsGithubTeamUserWhereInput = {
  AND?: Prisma.MetricsGithubTeamUserWhereInput | Prisma.MetricsGithubTeamUserWhereInput[];
  OR?: Prisma.MetricsGithubTeamUserWhereInput[];
  NOT?: Prisma.MetricsGithubTeamUserWhereInput | Prisma.MetricsGithubTeamUserWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  teamId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  userId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  role?: Prisma.StringNullableFilter<'MetricsGithubTeamUser'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubTeam?: Prisma.XOR<Prisma.MetricsGithubTeamScalarRelationFilter, Prisma.MetricsGithubTeamWhereInput>;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.XOR<
    Prisma.MetricsUserScalarRelationFilter,
    Prisma.MetricsUserWhereInput
  >;
  MetricsGithubUser?: Prisma.XOR<Prisma.MetricsGithubUserScalarRelationFilter, Prisma.MetricsGithubUserWhereInput>;
};

export type MetricsGithubTeamUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamOrderByWithRelationInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.MetricsUserOrderByWithRelationInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserOrderByWithRelationInput;
};

export type MetricsGithubTeamUserWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    tenantId_teamId_userId?: Prisma.MetricsGithubTeamUserTenantIdTeamIdUserIdCompoundUniqueInput;
    AND?: Prisma.MetricsGithubTeamUserWhereInput | Prisma.MetricsGithubTeamUserWhereInput[];
    OR?: Prisma.MetricsGithubTeamUserWhereInput[];
    NOT?: Prisma.MetricsGithubTeamUserWhereInput | Prisma.MetricsGithubTeamUserWhereInput[];
    teamId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
    userId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
    role?: Prisma.StringNullableFilter<'MetricsGithubTeamUser'> | string | null;
    createdBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
    updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
    createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
    tenantId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
    MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubTeam?: Prisma.XOR<Prisma.MetricsGithubTeamScalarRelationFilter, Prisma.MetricsGithubTeamWhereInput>;
    MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.XOR<
      Prisma.MetricsUserScalarRelationFilter,
      Prisma.MetricsUserWhereInput
    >;
    MetricsGithubUser?: Prisma.XOR<Prisma.MetricsGithubUserScalarRelationFilter, Prisma.MetricsGithubUserWhereInput>;
  },
  'id' | 'tenantId_teamId_userId'
>;

export type MetricsGithubTeamUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
  _count?: Prisma.MetricsGithubTeamUserCountOrderByAggregateInput;
  _max?: Prisma.MetricsGithubTeamUserMaxOrderByAggregateInput;
  _min?: Prisma.MetricsGithubTeamUserMinOrderByAggregateInput;
};

export type MetricsGithubTeamUserScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput[];
  OR?: Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput
    | Prisma.MetricsGithubTeamUserScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
  teamId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
  userId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
  role?: Prisma.StringNullableWithAggregatesFilter<'MetricsGithubTeamUser'> | string | null;
  createdBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeamUser'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'MetricsGithubTeamUser'> | Date | string;
  tenantId?: Prisma.UuidWithAggregatesFilter<'MetricsGithubTeamUser'> | string;
};

export type MetricsGithubTeamUserCreateInput = {
  id?: string;
  role?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserInput;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamUserInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubTeamUserInput;
};

export type MetricsGithubTeamUserUncheckedCreateInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
};

export type MetricsGithubTeamUserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserCreateManyInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserListRelationFilter = {
  every?: Prisma.MetricsGithubTeamUserWhereInput;
  some?: Prisma.MetricsGithubTeamUserWhereInput;
  none?: Prisma.MetricsGithubTeamUserWhereInput;
};

export type MetricsGithubTeamUserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type MetricsGithubTeamUserTenantIdTeamIdUserIdCompoundUniqueInput = {
  tenantId: string;
  teamId: string;
  userId: string;
};

export type MetricsGithubTeamUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  teamId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  tenantId?: Prisma.SortOrder;
};

export type MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInputEnvelope;
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
};

export type MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInputEnvelope;
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
};

export type MetricsGithubTeamUserUpdateManyWithoutMetricsGithubUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInputEnvelope;
  set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubUserInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubUserInput[];
  deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubUserInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInputEnvelope;
  set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubUserInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubUserInput[];
  deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
};

export type MetricsGithubTeamUserCreateNestedManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  };

export type MetricsGithubTeamUserCreateNestedManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  };

export type MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  };

export type MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInputEnvelope;
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  };

export type MetricsGithubTeamUserUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  };

export type MetricsGithubTeamUserUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  };

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  };

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
          Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
        >
      | Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[]
      | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    connectOrCreate?:
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    upsert?:
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInputEnvelope;
    set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
    update?:
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    updateMany?:
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
      | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
    deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  };

export type MetricsGithubTeamUserCreateNestedManyWithoutMetricsGithubTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInputEnvelope;
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
};

export type MetricsGithubTeamUserUncheckedCreateNestedManyWithoutMetricsGithubTeamInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInputEnvelope;
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
};

export type MetricsGithubTeamUserUpdateManyWithoutMetricsGithubTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInputEnvelope;
  set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubTeamInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubTeamInput[];
  deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
        Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
      >
    | Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput[]
    | Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput[];
  connectOrCreate?:
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput[];
  upsert?:
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubTeamInput[];
  createMany?: Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInputEnvelope;
  set?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  disconnect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  delete?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  connect?: Prisma.MetricsGithubTeamUserWhereUniqueInput | Prisma.MetricsGithubTeamUserWhereUniqueInput[];
  update?:
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubTeamInput[];
  updateMany?:
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubTeamInput[];
  deleteMany?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
};

export type MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput = {
  id?: string;
  role?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserInput;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamUserInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserInput;
};

export type MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput = {
  id?: string;
  teamId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubTeamUserCreateManyMetricsGithubUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInput
    | Prisma.MetricsGithubTeamUserCreateManyMetricsGithubUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubUserInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateWithoutMetricsGithubUserInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubUserInput = {
  where: Prisma.MetricsGithubTeamUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubUserInput
  >;
};

export type MetricsGithubTeamUserScalarWhereInput = {
  AND?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  OR?: Prisma.MetricsGithubTeamUserScalarWhereInput[];
  NOT?: Prisma.MetricsGithubTeamUserScalarWhereInput | Prisma.MetricsGithubTeamUserScalarWhereInput[];
  id?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  teamId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  userId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  role?: Prisma.StringNullableFilter<'MetricsGithubTeamUser'> | string | null;
  createdBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  updatedBy?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
  createdAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'MetricsGithubTeamUser'> | Date | string;
  tenantId?: Prisma.UuidFilter<'MetricsGithubTeamUser'> | string;
};

export type MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  id?: string;
  role?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamUserInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubTeamUserInput;
};

export type MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
    | Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  id?: string;
  role?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserInput;
  MetricsGithubTeam: Prisma.MetricsGithubTeamCreateNestedOneWithoutMetricsGithubTeamUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubTeamUserInput;
};

export type MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserCreateOrConnectWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
  >;
};

export type MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
    | Prisma.MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
    >;
    create: Prisma.XOR<
      Prisma.MetricsGithubTeamUserCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    where: Prisma.MetricsGithubTeamUserScalarWhereInput;
    data: Prisma.XOR<
      Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
      Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput
    >;
  };

export type MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput = {
  id?: string;
  role?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser: Prisma.MetricsUserCreateNestedOneWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserInput;
  MetricsGithubUser: Prisma.MetricsGithubUserCreateNestedOneWithoutMetricsGithubTeamUserInput;
};

export type MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput = {
  id?: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserCreateOrConnectWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamUserCreateManyMetricsGithubTeamInputEnvelope = {
  data:
    | Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInput
    | Prisma.MetricsGithubTeamUserCreateManyMetricsGithubTeamInput[];
  skipDuplicates?: boolean;
};

export type MetricsGithubTeamUserUpsertWithWhereUniqueWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubTeamInput
  >;
  create: Prisma.XOR<
    Prisma.MetricsGithubTeamUserCreateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamUserUncheckedCreateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamUserUpdateWithWhereUniqueWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateWithoutMetricsGithubTeamInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamUserUpdateManyWithWhereWithoutMetricsGithubTeamInput = {
  where: Prisma.MetricsGithubTeamUserScalarWhereInput;
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamInput
  >;
};

export type MetricsGithubTeamUserCreateManyMetricsGithubUserInput = {
  id?: string;
  teamId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserUpdateWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput;
};

export type MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserCreateManyMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  id?: string;
  teamId: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
};

export type MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_createdByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamUserUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput;
  MetricsGithubTeam?: Prisma.MetricsGithubTeamUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
};

export type MetricsGithubTeamUserUncheckedUpdateWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  teamId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsUser_MetricsGithubTeamUser_updatedByToMetricsUserInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    teamId?: Prisma.StringFieldUpdateOperationsInput | string;
    userId?: Prisma.StringFieldUpdateOperationsInput | string;
    role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type MetricsGithubTeamUserCreateManyMetricsGithubTeamInput = {
  id?: string;
  userId: string;
  role?: string | null;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  tenantId: string;
};

export type MetricsGithubTeamUserUpdateWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_createdByToMetricsUserNestedInput;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: Prisma.MetricsUserUpdateOneRequiredWithoutMetricsGithubTeamUser_MetricsGithubTeamUser_updatedByToMetricsUserNestedInput;
  MetricsGithubUser?: Prisma.MetricsGithubUserUpdateOneRequiredWithoutMetricsGithubTeamUserNestedInput;
};

export type MetricsGithubTeamUserUncheckedUpdateWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserUncheckedUpdateManyWithoutMetricsGithubTeamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  tenantId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type MetricsGithubTeamUserSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamUser']
>;

export type MetricsGithubTeamUserSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamUser']
>;

export type MetricsGithubTeamUserSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    teamId?: boolean;
    userId?: boolean;
    role?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    tenantId?: boolean;
    MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
    MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
    MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['metricsGithubTeamUser']
>;

export type MetricsGithubTeamUserSelectScalar = {
  id?: boolean;
  teamId?: boolean;
  userId?: boolean;
  role?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  tenantId?: boolean;
};

export type MetricsGithubTeamUserOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'teamId' | 'userId' | 'role' | 'createdBy' | 'updatedBy' | 'createdAt' | 'updatedAt' | 'tenantId',
  ExtArgs['result']['metricsGithubTeamUser']
>;
export type MetricsGithubTeamUserInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamUserIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};
export type MetricsGithubTeamUserIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubTeam?: boolean | Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser?: boolean | Prisma.MetricsUserDefaultArgs<ExtArgs>;
  MetricsGithubUser?: boolean | Prisma.MetricsGithubUserDefaultArgs<ExtArgs>;
};

export type $MetricsGithubTeamUserPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MetricsGithubTeamUser';
  objects: {
    MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubTeam: Prisma.$MetricsGithubTeamPayload<ExtArgs>;
    MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser: Prisma.$MetricsUserPayload<ExtArgs>;
    MetricsGithubUser: Prisma.$MetricsGithubUserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * @DtoCreateHidden
       */
      id: string;
      teamId: string;
      userId: string;
      role: string | null;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedBy: string;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      createdAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      updatedAt: Date;
      /**
       * @DtoCreateHidden
       * @DtoUpdateHidden
       */
      tenantId: string;
    },
    ExtArgs['result']['metricsGithubTeamUser']
  >;
  composites: {};
};

export type MetricsGithubTeamUserGetPayload<S extends boolean | null | undefined | MetricsGithubTeamUserDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload, S>;

export type MetricsGithubTeamUserCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricsGithubTeamUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricsGithubTeamUserCountAggregateInputType | true;
};

export interface MetricsGithubTeamUserDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MetricsGithubTeamUser'];
    meta: { name: 'MetricsGithubTeamUser' };
  };
  /**
   * Find zero or one MetricsGithubTeamUser that matches the filter.
   * @param {MetricsGithubTeamUserFindUniqueArgs} args - Arguments to find a MetricsGithubTeamUser
   * @example
   * // Get one MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricsGithubTeamUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one MetricsGithubTeamUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricsGithubTeamUserFindUniqueOrThrowArgs} args - Arguments to find a MetricsGithubTeamUser
   * @example
   * // Get one MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricsGithubTeamUserFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeamUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserFindFirstArgs} args - Arguments to find a MetricsGithubTeamUser
   * @example
   * // Get one MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricsGithubTeamUserFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first MetricsGithubTeamUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserFindFirstOrThrowArgs} args - Arguments to find a MetricsGithubTeamUser
   * @example
   * // Get one MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricsGithubTeamUserFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more MetricsGithubTeamUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetricsGithubTeamUsers
   * const metricsGithubTeamUsers = await prisma.metricsGithubTeamUser.findMany()
   *
   * // Get first 10 MetricsGithubTeamUsers
   * const metricsGithubTeamUsers = await prisma.metricsGithubTeamUser.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricsGithubTeamUserWithIdOnly = await prisma.metricsGithubTeamUser.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricsGithubTeamUserFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'findMany', GlobalOmitOptions>
  >;

  /**
   * Create a MetricsGithubTeamUser.
   * @param {MetricsGithubTeamUserCreateArgs} args - Arguments to create a MetricsGithubTeamUser.
   * @example
   * // Create one MetricsGithubTeamUser
   * const MetricsGithubTeamUser = await prisma.metricsGithubTeamUser.create({
   *   data: {
   *     // ... data to create a MetricsGithubTeamUser
   *   }
   * })
   *
   */
  create<T extends MetricsGithubTeamUserCreateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many MetricsGithubTeamUsers.
   * @param {MetricsGithubTeamUserCreateManyArgs} args - Arguments to create many MetricsGithubTeamUsers.
   * @example
   * // Create many MetricsGithubTeamUsers
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricsGithubTeamUserCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many MetricsGithubTeamUsers and returns the data saved in the database.
   * @param {MetricsGithubTeamUserCreateManyAndReturnArgs} args - Arguments to create many MetricsGithubTeamUsers.
   * @example
   * // Create many MetricsGithubTeamUsers
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MetricsGithubTeamUsers and only return the `id`
   * const metricsGithubTeamUserWithIdOnly = await prisma.metricsGithubTeamUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricsGithubTeamUserCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a MetricsGithubTeamUser.
   * @param {MetricsGithubTeamUserDeleteArgs} args - Arguments to delete one MetricsGithubTeamUser.
   * @example
   * // Delete one MetricsGithubTeamUser
   * const MetricsGithubTeamUser = await prisma.metricsGithubTeamUser.delete({
   *   where: {
   *     // ... filter to delete one MetricsGithubTeamUser
   *   }
   * })
   *
   */
  delete<T extends MetricsGithubTeamUserDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one MetricsGithubTeamUser.
   * @param {MetricsGithubTeamUserUpdateArgs} args - Arguments to update one MetricsGithubTeamUser.
   * @example
   * // Update one MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricsGithubTeamUserUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more MetricsGithubTeamUsers.
   * @param {MetricsGithubTeamUserDeleteManyArgs} args - Arguments to filter MetricsGithubTeamUsers to delete.
   * @example
   * // Delete a few MetricsGithubTeamUsers
   * const { count } = await prisma.metricsGithubTeamUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricsGithubTeamUserDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricsGithubTeamUserDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeamUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetricsGithubTeamUsers
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricsGithubTeamUserUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more MetricsGithubTeamUsers and returns the data updated in the database.
   * @param {MetricsGithubTeamUserUpdateManyAndReturnArgs} args - Arguments to update many MetricsGithubTeamUsers.
   * @example
   * // Update many MetricsGithubTeamUsers
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MetricsGithubTeamUsers and only return the `id`
   * const metricsGithubTeamUserWithIdOnly = await prisma.metricsGithubTeamUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricsGithubTeamUserUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricsGithubTeamUserPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one MetricsGithubTeamUser.
   * @param {MetricsGithubTeamUserUpsertArgs} args - Arguments to update or create a MetricsGithubTeamUser.
   * @example
   * // Update or create a MetricsGithubTeamUser
   * const metricsGithubTeamUser = await prisma.metricsGithubTeamUser.upsert({
   *   create: {
   *     // ... data to create a MetricsGithubTeamUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetricsGithubTeamUser we want to update
   *   }
   * })
   */
  upsert<T extends MetricsGithubTeamUserUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricsGithubTeamUserUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamUserClient<
    runtime.Types.Result.GetResult<Prisma.$MetricsGithubTeamUserPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of MetricsGithubTeamUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserCountArgs} args - Arguments to filter MetricsGithubTeamUsers to count.
   * @example
   * // Count the number of MetricsGithubTeamUsers
   * const count = await prisma.metricsGithubTeamUser.count({
   *   where: {
   *     // ... the filter for the MetricsGithubTeamUsers we want to count
   *   }
   * })
   **/
  count<T extends MetricsGithubTeamUserCountArgs>(
    args?: Prisma.Subset<T, MetricsGithubTeamUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricsGithubTeamUserCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a MetricsGithubTeamUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricsGithubTeamUserAggregateArgs>(
    args: Prisma.Subset<T, MetricsGithubTeamUserAggregateArgs>,
  ): Prisma.PrismaPromise<GetMetricsGithubTeamUserAggregateType<T>>;

  /**
   * Group by MetricsGithubTeamUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricsGithubTeamUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricsGithubTeamUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<T>>, Prisma.Extends<'take', Prisma.Keys<T>>>,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricsGithubTeamUserGroupByArgs['orderBy'] }
      : { orderBy?: MetricsGithubTeamUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricsGithubTeamUserGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors ? GetMetricsGithubTeamUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the MetricsGithubTeamUser model
   */
  readonly fields: MetricsGithubTeamUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetricsGithubTeamUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricsGithubTeamUserClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  MetricsUser_MetricsGithubTeamUser_createdByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubTeam<T extends Prisma.MetricsGithubTeamDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubTeamDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubTeamClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubTeamPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsUser_MetricsGithubTeamUser_updatedByToMetricsUser<T extends Prisma.MetricsUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsUserClient<
    | runtime.Types.Result.GetResult<Prisma.$MetricsUserPayload<ExtArgs>, T, 'findUniqueOrThrow', GlobalOmitOptions>
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  MetricsGithubUser<T extends Prisma.MetricsGithubUserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MetricsGithubUserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__MetricsGithubUserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MetricsGithubUserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the MetricsGithubTeamUser model
 */
export interface MetricsGithubTeamUserFieldRefs {
  readonly id: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly teamId: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly userId: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly role: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly createdBy: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
  readonly createdAt: Prisma.FieldRef<'MetricsGithubTeamUser', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'MetricsGithubTeamUser', 'DateTime'>;
  readonly tenantId: Prisma.FieldRef<'MetricsGithubTeamUser', 'String'>;
}

// Custom InputTypes
/**
 * MetricsGithubTeamUser findUnique
 */
export type MetricsGithubTeamUserFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamUser to fetch.
   */
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
};

/**
 * MetricsGithubTeamUser findUniqueOrThrow
 */
export type MetricsGithubTeamUserFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamUser to fetch.
   */
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
};

/**
 * MetricsGithubTeamUser findFirst
 */
export type MetricsGithubTeamUserFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamUser to fetch.
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamUsers to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeamUsers.
   */
  cursor?: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeamUsers.
   */
  distinct?: Prisma.MetricsGithubTeamUserScalarFieldEnum | Prisma.MetricsGithubTeamUserScalarFieldEnum[];
};

/**
 * MetricsGithubTeamUser findFirstOrThrow
 */
export type MetricsGithubTeamUserFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamUser to fetch.
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamUsers to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MetricsGithubTeamUsers.
   */
  cursor?: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MetricsGithubTeamUsers.
   */
  distinct?: Prisma.MetricsGithubTeamUserScalarFieldEnum | Prisma.MetricsGithubTeamUserScalarFieldEnum[];
};

/**
 * MetricsGithubTeamUser findMany
 */
export type MetricsGithubTeamUserFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter, which MetricsGithubTeamUsers to fetch.
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MetricsGithubTeamUsers to fetch.
   */
  orderBy?:
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput
    | Prisma.MetricsGithubTeamUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MetricsGithubTeamUsers.
   */
  cursor?: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MetricsGithubTeamUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MetricsGithubTeamUsers.
   */
  skip?: number;
  distinct?: Prisma.MetricsGithubTeamUserScalarFieldEnum | Prisma.MetricsGithubTeamUserScalarFieldEnum[];
};

/**
 * MetricsGithubTeamUser create
 */
export type MetricsGithubTeamUserCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * The data needed to create a MetricsGithubTeamUser.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamUserCreateInput, Prisma.MetricsGithubTeamUserUncheckedCreateInput>;
};

/**
 * MetricsGithubTeamUser createMany
 */
export type MetricsGithubTeamUserCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MetricsGithubTeamUsers.
   */
  data: Prisma.MetricsGithubTeamUserCreateManyInput | Prisma.MetricsGithubTeamUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * MetricsGithubTeamUser createManyAndReturn
 */
export type MetricsGithubTeamUserCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * The data used to create many MetricsGithubTeamUsers.
   */
  data: Prisma.MetricsGithubTeamUserCreateManyInput | Prisma.MetricsGithubTeamUserCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeamUser update
 */
export type MetricsGithubTeamUserUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * The data needed to update a MetricsGithubTeamUser.
   */
  data: Prisma.XOR<Prisma.MetricsGithubTeamUserUpdateInput, Prisma.MetricsGithubTeamUserUncheckedUpdateInput>;
  /**
   * Choose, which MetricsGithubTeamUser to update.
   */
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
};

/**
 * MetricsGithubTeamUser updateMany
 */
export type MetricsGithubTeamUserUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MetricsGithubTeamUsers.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubTeamUsers to update
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * Limit how many MetricsGithubTeamUsers to update.
   */
  limit?: number;
};

/**
 * MetricsGithubTeamUser updateManyAndReturn
 */
export type MetricsGithubTeamUserUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * The data used to update MetricsGithubTeamUsers.
   */
  data: Prisma.XOR<
    Prisma.MetricsGithubTeamUserUpdateManyMutationInput,
    Prisma.MetricsGithubTeamUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which MetricsGithubTeamUsers to update
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * Limit how many MetricsGithubTeamUsers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * MetricsGithubTeamUser upsert
 */
export type MetricsGithubTeamUserUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * The filter to search for the MetricsGithubTeamUser to update in case it exists.
   */
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
  /**
   * In case the MetricsGithubTeamUser found by the `where` argument doesn't exist, create a new MetricsGithubTeamUser with this data.
   */
  create: Prisma.XOR<Prisma.MetricsGithubTeamUserCreateInput, Prisma.MetricsGithubTeamUserUncheckedCreateInput>;
  /**
   * In case the MetricsGithubTeamUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetricsGithubTeamUserUpdateInput, Prisma.MetricsGithubTeamUserUncheckedUpdateInput>;
};

/**
 * MetricsGithubTeamUser delete
 */
export type MetricsGithubTeamUserDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
  /**
   * Filter which MetricsGithubTeamUser to delete.
   */
  where: Prisma.MetricsGithubTeamUserWhereUniqueInput;
};

/**
 * MetricsGithubTeamUser deleteMany
 */
export type MetricsGithubTeamUserDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MetricsGithubTeamUsers to delete
   */
  where?: Prisma.MetricsGithubTeamUserWhereInput;
  /**
   * Limit how many MetricsGithubTeamUsers to delete.
   */
  limit?: number;
};

/**
 * MetricsGithubTeamUser without action
 */
export type MetricsGithubTeamUserDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MetricsGithubTeamUser
   */
  select?: Prisma.MetricsGithubTeamUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the MetricsGithubTeamUser
   */
  omit?: Prisma.MetricsGithubTeamUserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricsGithubTeamUserInclude<ExtArgs> | null;
};
