generator client {
  provider = "prisma-client"
  
  output   = "../../../../../libs/feature/metrics/src/lib/generated/prisma-client"
  
  previewFeatures = ["queryCompiler","driverAdapters"]
  
  moduleFormat = "cjs"
  
  
}
datasource db {
  provider          = "postgres"
  url               = env("SITE_15_METRICS_DATABASE_URL")
}
generator prismaClassGenerator {
  provider                        = "npm run generator"
  output                          = "../lib/generated/rest/dto"
  annotateAllDtoProperties        = "true"
  classValidation                 = "true"
  createDtoPrefix                 = "Create"
  definiteAssignmentAssertion     = "true"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  exportRelationModifierClasses   = "true"
  fileNamingStyle                 = "kebab"
  flatResourceStructure           = "false"
  noDependencies                  = "false"
  outputToNestJsResourceStructure = "false"
  prettier                        = "true"
  reExport                        = "false"
  updateDtoPrefix                 = "Update"
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MetricsGithubMetric {
  id                                                     String                  @id(map: "PK_METRICS_GITHUB_METRIC") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  repositoryId                                           String                  @db.Uuid
  metricName                                             String                  @db.VarChar(255)
  metricValue                                            Float
  recordedAt                                             DateTime                @db.Timestamp(6)
  createdBy                                              String                  @db.Uuid
  updatedBy                                              String                  @db.Uuid
  createdAt                                              DateTime                @default(now()) @db.Timestamp(6)
  updatedAt                                              DateTime                @default(now()) @db.Timestamp(6)
  tenantId                                               String                  @db.Uuid
  MetricsUser_MetricsGithubMetric_createdByToMetricsUser MetricsUser             @relation("MetricsGithubMetric_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__CREATED_BY")
  MetricsGithubRepository                                MetricsGithubRepository @relation(fields: [repositoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__REPOSITORY_ID")
  MetricsUser_MetricsGithubMetric_updatedByToMetricsUser MetricsUser             @relation("MetricsGithubMetric_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_METRIC__UPDATED_BY")

  @@unique([tenantId, repositoryId, metricName, recordedAt], map: "UQ_METRICS_GITHUB_METRIC__REPOSITORY_METRIC_NAME_RECORDED_AT")
  @@index([tenantId, repositoryId], map: "IDX_METRICS_GITHUB_METRIC__REPOSITORY_ID")
  @@index([tenantId], map: "IDX_METRICS_GITHUB_METRIC__TENANT_ID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MetricsGithubRepository {
  id                                                         String                        @id(map: "PK_METRICS_GITHUB_REPOSITORY") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                                       String                        @db.VarChar(255)
  owner                                                      String                        @db.VarChar(255)
  private                                                    Boolean
  fork                                                       Boolean
  createdBy                                                  String                        @db.Uuid
  updatedBy                                                  String                        @db.Uuid
  createdAt                                                  DateTime                      @default(now()) @db.Timestamp(6)
  updatedAt                                                  DateTime                      @default(now()) @db.Timestamp(6)
  tenantId                                                   String                        @db.Uuid
  MetricsGithubMetric                                        MetricsGithubMetric[]
  MetricsUser_MetricsGithubRepository_createdByToMetricsUser MetricsUser                   @relation("MetricsGithubRepository_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_REPOSITORY__CREATED_BY")
  MetricsUser_MetricsGithubRepository_updatedByToMetricsUser MetricsUser                   @relation("MetricsGithubRepository_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_REPOSITORY__UPDATED_BY")
  MetricsGithubUserRepository                                MetricsGithubUserRepository[]

  @@unique([tenantId, name, owner], map: "UQ_METRICS_GITHUB_REPOSITORY__NAME_OWNER")
  @@index([tenantId], map: "IDX_METRICS_GITHUB_REPOSITORY__TENANT_ID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MetricsGithubUser {
  id                                                   String                        @id(map: "PK_METRICS_GITHUB_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  login                                                String                        @db.VarChar(255)
  name                                                 String?                       @db.VarChar(255)
  email                                                String?                       @db.VarChar(255)
  createdBy                                            String                        @db.Uuid
  updatedBy                                            String                        @db.Uuid
  createdAt                                            DateTime                      @default(now()) @db.Timestamp(6)
  updatedAt                                            DateTime                      @default(now()) @db.Timestamp(6)
  tenantId                                             String                        @db.Uuid
  MetricsUser_MetricsGithubUser_createdByToMetricsUser MetricsUser                   @relation("MetricsGithubUser_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER__CREATED_BY")
  MetricsUser_MetricsGithubUser_updatedByToMetricsUser MetricsUser                   @relation("MetricsGithubUser_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER__UPDATED_BY")
  MetricsGithubUserRepository                          MetricsGithubUserRepository[]

  @@unique([tenantId, login], map: "UQ_METRICS_GITHUB_USER__LOGIN")
  @@index([tenantId], map: "IDX_METRICS_GITHUB_USER__TENANT_ID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model MetricsGithubUserRepository {
  id                                                             String                  @id(map: "PK_METRICS_GITHUB_USER_REPOSITORY") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                                                         String                  @db.Uuid
  repositoryId                                                   String                  @db.Uuid
  role                                                           String                  @db.VarChar(50)
  createdBy                                                      String                  @db.Uuid
  updatedBy                                                      String                  @db.Uuid
  createdAt                                                      DateTime                @default(now()) @db.Timestamp(6)
  updatedAt                                                      DateTime                @default(now()) @db.Timestamp(6)
  tenantId                                                       String                  @db.Uuid
  MetricsUser_MetricsGithubUserRepository_createdByToMetricsUser MetricsUser             @relation("MetricsGithubUserRepository_createdByToMetricsUser", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__CREATED_BY")
  MetricsGithubRepository                                        MetricsGithubRepository @relation(fields: [repositoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__REPOSITORY_ID")
  MetricsUser_MetricsGithubUserRepository_updatedByToMetricsUser MetricsUser             @relation("MetricsGithubUserRepository_updatedByToMetricsUser", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__UPDATED_BY")
  MetricsGithubUser                                              MetricsGithubUser       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_METRICS_GITHUB_USER_REPOSITORY__USER_ID")

  @@unique([tenantId, userId, repositoryId], map: "UQ_METRICS_GITHUB_USER_REPOSITORY__USER_REPOSITORY")
  @@index([tenantId], map: "IDX_METRICS_GITHUB_USER_REPOSITORY__TENANT_ID")
}

model MetricsUser {
  id                                                                             String                        @id(map: "PK_METRICS_USER") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenantId                                                                       String                        @db.Uuid
  externalUserId                                                                 String                        @db.Uuid
  userRole                                                                       MetricsRole
  createdAt                                                                      DateTime                      @default(now()) @db.Timestamp(6)
  updatedAt                                                                      DateTime                      @default(now()) @db.Timestamp(6)
  MetricsGithubMetric_MetricsGithubMetric_createdByToMetricsUser                 MetricsGithubMetric[]         @relation("MetricsGithubMetric_createdByToMetricsUser")
  MetricsGithubMetric_MetricsGithubMetric_updatedByToMetricsUser                 MetricsGithubMetric[]         @relation("MetricsGithubMetric_updatedByToMetricsUser")
  MetricsGithubRepository_MetricsGithubRepository_createdByToMetricsUser         MetricsGithubRepository[]     @relation("MetricsGithubRepository_createdByToMetricsUser")
  MetricsGithubRepository_MetricsGithubRepository_updatedByToMetricsUser         MetricsGithubRepository[]     @relation("MetricsGithubRepository_updatedByToMetricsUser")
  MetricsGithubUser_MetricsGithubUser_createdByToMetricsUser                     MetricsGithubUser[]           @relation("MetricsGithubUser_createdByToMetricsUser")
  MetricsGithubUser_MetricsGithubUser_updatedByToMetricsUser                     MetricsGithubUser[]           @relation("MetricsGithubUser_updatedByToMetricsUser")
  MetricsGithubUserRepository_MetricsGithubUserRepository_createdByToMetricsUser MetricsGithubUserRepository[] @relation("MetricsGithubUserRepository_createdByToMetricsUser")
  MetricsGithubUserRepository_MetricsGithubUserRepository_updatedByToMetricsUser MetricsGithubUserRepository[] @relation("MetricsGithubUserRepository_updatedByToMetricsUser")

  @@unique([tenantId, externalUserId], map: "UQ_METRICS_USER")
  @@index([tenantId], map: "IDX_METRICS_USER__TENANT_ID")
  @@index([tenantId, userRole], map: "IDX_METRICS_USER__USER_ROLE")
}

model migrations_metrics {
  installed_rank Int      @id(map: "__migrations_metrics_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_metrics_s_idx")
  @@map("__migrations_metrics")
}

enum MetricsRole {
  Admin
  User
}
